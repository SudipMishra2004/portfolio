let isLoaded = false; let particlesArray = []; let mouseX = 0; let mouseY = 0; let cursorTrail = []; let scanLinesActive = true; class ParticleSystem { constructor() { this.container = document.getElementById('particles-container'); this.particles = []; this.dataStreams = []; this.floatingParticles = []; this.codeParticles = []; this.matrixLines = []; this.maxParticles = 100; this.maxDataStreams = 20; this.maxFloatingParticles = 30; this.maxCodeParticles = 15; this.maxMatrixLines = 8} init() { if (!this.container) { console.warn('Particles container not found, skipping particle system'); return} this.createParticles(); this.createDataStreams(); this.createFloatingParticles(); this.createCodeRain(); this.createMatrixLines(); this.createSectionParticles(); this.animate()} createParticles() { for (let i = 0; i < this.maxParticles; i++) { this.createParticle()} } createDataStreams() { for (let i = 0; i < this.maxDataStreams; i++) { this.createDataStream()} } createParticle() { const particle = document.createElement('div'); particle.className = 'particle'; const startX = Math.random() * window.innerWidth; const startY = window.innerHeight + 10; const size = Math.random() * 4 + 1; const speed = Math.random() * 3 + 0.5; const opacity = Math.random() * 0.7 + 0.3; const rotationSpeed = Math.random() * 2 - 1; particle.style.left = `${startX}px`; particle.style.top = `${startY}px`; particle.style.width = `${size}px`; particle.style.height = `${size}px`; particle.style.opacity = opacity; particle.style.borderRadius = Math.random() > 0.5 ? '50%' : '0%'; const colors = ['#00d4ff', '#ff3366', '#00ffff', '#ff6b35', '#8844ff', '#00ff88']; const color = colors[Math.floor(Math.random() * colors.length)]; particle.style.background = color; particle.style.boxShadow = `0 0 ${size * 2}px ${color}80`; particle.style.transition = 'all 0.3s ease'; this.container.appendChild(particle); this.particles.push({ element: particle, x: startX, y: startY, speed: speed, size: size, rotationSpeed: rotationSpeed, rotation: 0, pulsePhase: Math.random() * Math.PI * 2 })} createDataStream() { const stream = document.createElement('div'); stream.className = 'data-stream'; const startX = Math.random() * window.innerWidth; const startY = window.innerHeight + 10; const speed = Math.random() * 4 + 2; stream.style.left = `${startX}px`; stream.style.top = `${startY}px`; stream.style.width = '2px'; stream.style.height = `${Math.random() * 30 + 10}px`; stream.style.background = 'linear-gradient(to top, transparent, #00d4ff, transparent)'; stream.style.opacity = Math.random() * 0.8 + 0.2; this.container.appendChild(stream); this.dataStreams.push({ element: stream, x: startX, y: startY, speed: speed })} animate() { this.particles.forEach((particle, index) => { particle.y -= particle.speed; particle.x += Math.sin(particle.y * 0.01) * 0.8; particle.rotation += particle.rotationSpeed; const pulse = Math.sin(Date.now() * 0.005 + particle.pulsePhase) * 0.3 + 0.7; particle.element.style.opacity = particle.element.style.opacity * pulse; particle.element.style.left = `${particle.x}px`; particle.element.style.top = `${particle.y}px`; particle.element.style.transform = `rotate(${particle.rotation}deg) scale(${pulse})`; if (particle.y < -10) { particle.element.remove(); this.particles.splice(index, 1); this.createParticle()} }); this.dataStreams.forEach((stream, index) => { stream.y -= stream.speed; stream.element.style.top = `${stream.y}px`; if (stream.y < -50) { stream.element.remove(); this.dataStreams.splice(index, 1); this.createDataStream()} }); if (isLoaded) { requestAnimationFrame(() => this.animate())} } } class CyberEffects { constructor() { this.glitchElements = document.querySelectorAll('[data-text]')} init() { this.initGlitchEffects(); this.initMouseTracker(); this.initScrollEffects(); this.initScanLines(); this.initFloatingShapes(); this.initCursorTrail(); this.initPulseEffects(); this.initCyberGrid()} initGlitchEffects() { this.glitchElements.forEach(element => { element.addEventListener('mouseenter', () => { this.triggerGlitch(element)})})} triggerGlitch(element) { const originalText = element.textContent; const glitchChars = '!@#$%^&*()_+-=[]{}|;:,.<>?'; let iterations = 0; const glitchInterval = setInterval(() => { element.textContent = originalText .split('') .map((char, index) => { if (index < iterations) { return originalText[index]} return glitchChars[Math.floor(Math.random() * glitchChars.length)]}) .join(''); if (iterations >= originalText.length) { clearInterval(glitchInterval); element.textContent = originalText} iterations += 1/3}, 30)} initMouseTracker() { document.addEventListener('mousemove', (e) => { mouseX = e.clientX; mouseY = e.clientY; const rings = document.querySelectorAll('.hologram-ring'); rings.forEach((ring, index) => { const speed = (index + 1) * 0.0001; const x = (mouseX - window.innerWidth / 2) * speed; const y = (mouseY - window.innerHeight / 2) * speed; ring.style.transform = `translate(${x}px, ${y}px) rotate(${Date.now() * speed}deg)`})})} initScrollEffects() { const observerOptions = { threshold: 0.1, rootMargin: '0px 0px -100px 0px' }; const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.style.opacity = '1'; entry.target.style.transform = 'translateY(0)'; if (entry.target.classList.contains('skill-category')) { this.animateSkillBars(entry.target)} if (entry.target.classList.contains('project-card')) { this.animateProjectCard(entry.target)} } })}, observerOptions); const animateElements = document.querySelectorAll('.skill-category, .project-card, .certificate-card, .terminal-window, .cyber-avatar'); animateElements.forEach(el => { el.style.opacity = '0'; el.style.transform = 'translateY(50px)'; el.style.transition = 'opacity 0.8s ease-out, transform 0.8s ease-out'; observer.observe(el)})} animateSkillBars(category) { const skillBars = category.querySelectorAll('.skill-progress'); skillBars.forEach((bar, index) => { setTimeout(() => { const width = bar.getAttribute('data-width'); bar.style.width = width}, index * 200)})} animateProjectCard(card) { const scan = card.querySelector('.project-scan'); if (scan) { scan.style.animation = 'projectScan 2s ease-in-out'} } initScanLines() { const scanLine = document.createElement('div'); scanLine.className = 'cyber-scan-line'; scanLine.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 2px; background: linear-gradient(90deg, transparent, #00d4ff, transparent); z-index: 1000; pointer-events: none; opacity: 0.7; transform: translateY(-100vh); `; document.body.appendChild(scanLine); setInterval(() => { if (scanLinesActive) { scanLine.style.transition = 'transform 3s ease-in-out'; scanLine.style.transform = 'translateY(100vh)'; setTimeout(() => { scanLine.style.transition = 'none'; scanLine.style.transform = 'translateY(-100vh)'}, 3000)} }, 8000)} initFloatingShapes() { const shapes = ['triangle', 'hexagon', 'diamond']; for (let i = 0; i < 8; i++) { const shape = document.createElement('div'); const shapeType = shapes[Math.floor(Math.random() * shapes.length)]; shape.className = `floating-shape ${shapeType}`; const size = Math.random() * 30 + 20; const x = Math.random() * window.innerWidth; const y = Math.random() * window.innerHeight; const duration = Math.random() * 10 + 15; shape.style.cssText = ` position: fixed; width: ${size}px; height: ${size}px; left: ${x}px; top: ${y}px; border: 1px solid #00d4ff40; background: transparent; z-index: -1; pointer-events: none; opacity: 0.3; animation: floatShape ${duration}s infinite ease-in-out; animation-delay: ${Math.random() * 5}s; `; if (shapeType === 'triangle') { shape.style.borderRadius = '0'; shape.style.clipPath = 'polygon(50% 0%, 0% 100%, 100% 100%)'} else if (shapeType === 'hexagon') { shape.style.clipPath = 'polygon(50% 0%, 93.3% 25%, 93.3% 75%, 50% 100%, 6.7% 75%, 6.7% 25%)'} else { shape.style.transform = 'rotate(45deg)'} document.body.appendChild(shape)} const style = document.createElement('style'); style.textContent = ` @keyframes floatShape { 0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.3} 50% { transform: translateY(-20px) rotate(180deg); opacity: 0.6} } `; document.head.appendChild(style)} initCursorTrail() { let trails = []; const maxTrails = 15; document.addEventListener('mousemove', (e) => { const trail = document.createElement('div'); trail.className = 'cursor-trail'; trail.style.cssText = ` position: fixed; width: 4px; height: 4px; background: #00d4ff; border-radius: 50%; pointer-events: none; z-index: 999; left: ${e.clientX}px; top: ${e.clientY}px; box-shadow: 0 0 10px #00d4ff; transition: all 0.5s ease-out; `; document.body.appendChild(trail); trails.push(trail); if (trails.length > maxTrails) { const oldTrail = trails.shift(); oldTrail.style.opacity = '0'; oldTrail.style.transform = 'scale(0)'; setTimeout(() => oldTrail.remove(), 500)} setTimeout(() => { trail.style.opacity = '0'; trail.style.transform = 'scale(2)'}, 100)})} initPulseEffects() { const buttons = document.querySelectorAll('button, .btn, .nav-link, .skill-item, .project-card'); buttons.forEach(button => { button.addEventListener('mouseenter', () => { this.addPulseEffect(button)})})} addPulseEffect(element) { const pulse = document.createElement('div'); pulse.className = 'pulse-effect'; pulse.style.cssText = ` position: absolute; top: 50%; left: 50%; width: 10px; height: 10px; border: 2px solid #00d4ff; border-radius: 50%; transform: translate(-50%, -50%); pointer-events: none; z-index: 1; animation: pulseExpand 0.6s ease-out forwards; `; element.style.position = 'relative'; element.appendChild(pulse); if (!document.querySelector('#pulse-style')) { const style = document.createElement('style'); style.id = 'pulse-style'; style.textContent = ` @keyframes pulseExpand { 0% { transform: translate(-50%, -50%) scale(0); opacity: 1} 100% { transform: translate(-50%, -50%) scale(3); opacity: 0} } `; document.head.appendChild(style)} setTimeout(() => pulse.remove(), 600)} initCyberGrid() { const grid = document.createElement('div'); grid.className = 'cyber-grid'; grid.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: -2; opacity: 0.1; background-image: linear-gradient(rgba(0, 212, 255, 0.1) 1px, transparent 1px), linear-gradient(90deg, rgba(0, 212, 255, 0.1) 1px, transparent 1px); background-size: 50px 50px; animation: gridMove 20s linear infinite; `; document.body.appendChild(grid); const style = document.createElement('style'); style.textContent = ` @keyframes gridMove { 0% { transform: translate(0, 0)} 100% { transform: translate(50px, 50px)} } `; document.head.appendChild(style)} } class NavigationSystem { constructor() { this.nav = document.getElementById('cyber-nav'); this.navToggle = document.getElementById('nav-toggle'); this.navMenu = document.getElementById('nav-menu'); this.navLinks = document.querySelectorAll('.nav-link')} init() { if (!this.nav || !this.navToggle || !this.navMenu) { console.warn('Navigation elements not found, skipping navigation initialization'); return} this.initMobileMenu(); this.initSmoothScroll(); this.initScrollSpy(); this.initNavbarEffects()} initMobileMenu() { if (!this.navToggle || !this.navMenu) return; this.navToggle.addEventListener('click', () => { this.navToggle.classList.toggle('active'); this.navMenu.classList.toggle('active')}); this.navLinks.forEach(link => { link.addEventListener('click', () => { this.navToggle.classList.remove('active'); this.navMenu.classList.remove('active')})})} initSmoothScroll() { this.navLinks.forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); const targetId = link.getAttribute('href'); const targetSection = document.querySelector(targetId); if (targetSection) { const offsetTop = targetSection.offsetTop - 80; window.scrollTo({ top: offsetTop, behavior: 'smooth' })} })})} initScrollSpy() { const sections = document.querySelectorAll('section[id]'); window.addEventListener('scroll', () => { const scrollPos = window.scrollY + 100; sections.forEach(section => { const sectionTop = section.offsetTop; const sectionHeight = section.offsetHeight; const sectionId = section.getAttribute('id'); if (scrollPos >= sectionTop && scrollPos < sectionTop + sectionHeight) { this.navLinks.forEach(link => { link.classList.remove('active'); if (link.getAttribute('href') === `#${sectionId}`) { link.classList.add('active')} })} })})} initNavbarEffects() { let lastScrollTop = 0; window.addEventListener('scroll', () => { const scrollTop = window.pageYOffset; if (scrollTop > 100) { this.nav.style.background = 'rgba(13, 20, 33, 0.98)'; this.nav.style.boxShadow = '0 4px 20px rgba(0, 212, 255, 0.2)'} else { this.nav.style.background = 'rgba(13, 20, 33, 0.95)'; this.nav.style.boxShadow = 'none'} lastScrollTop = scrollTop})} } class HeroAnimations { constructor() { this.heroTitle = document.querySelector('.hero-title'); this.statValues = document.querySelectorAll('.stat-value'); this.heroAvatar = document.querySelector('.hero-avatar')} init() { this.initTypingAnimation(); this.initCounterAnimation(); this.initFloatingElements(); this.initFrameAnimations(); this.initInteractiveElements()} initTypingAnimation() { const titleLines = this.heroTitle.querySelectorAll('.title-line'); titleLines.forEach((line, index) => { const text = line.textContent; line.textContent = ''; line.style.opacity = '1'; setTimeout(() => { this.typeText(line, text, 100)}, index * 1000 + 500)})} typeText(element, text, speed) { let i = 0; const typeInterval = setInterval(() => { element.textContent += text.charAt(i); i++; if (i >= text.length) { clearInterval(typeInterval)} }, speed)} initCounterAnimation() { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const target = parseInt(entry.target.getAttribute('data-target')); this.animateCounter(entry.target, target); observer.unobserve(entry.target)} })}, { threshold: 0.5 }); this.statValues.forEach(stat => { observer.observe(stat)})} animateCounter(element, target) { let current = 0; const increment = target / 100; const timer = setInterval(() => { current += increment; element.textContent = Math.floor(current); if (current >= target) { element.textContent = target; clearInterval(timer)} }, 20)} initFloatingElements() { const floatingElements = document.querySelectorAll('.float-element'); floatingElements.forEach((element, index) => { element.style.animationDelay = `${index * 0.5}s`})} initFrameAnimations() { if (!this.heroAvatar) return; this.createEnergyOrbs(); this.addFrameInteractivity(); this.createDataStreams()} createEnergyOrbs() { const orbCount = 6; for (let i = 0; i < orbCount; i++) { const orb = document.createElement('div'); orb.className = 'energy-orb'; orb.style.cssText = ` position: absolute; width: 8px; height: 8px; background: ${i % 2 === 0 ? '#00d4ff' : '#ff3366'}; border-radius: 50%; box-shadow: 0 0 15px ${i % 2 === 0 ? '#00d4ff' : '#ff3366'}; z-index: 30; animation: orbitFrame ${4 + i}s linear infinite; animation-delay: ${i * 0.5}s; `; this.heroAvatar.appendChild(orb)} if (!document.querySelector('#orb-style')) { const style = document.createElement('style'); style.id = 'orb-style'; style.textContent = ` @keyframes orbitFrame { 0% { transform: rotate(0deg) translateX(200px) rotate(0deg); opacity: 0.6} 50% { opacity: 1} 100% { transform: rotate(360deg) translateX(200px) rotate(-360deg); opacity: 0.6} } `; document.head.appendChild(style)} } addFrameInteractivity() { const frameCorners = this.heroAvatar.querySelectorAll('.frame-corner'); const techElements = this.heroAvatar.querySelectorAll('.tech-element'); setInterval(() => { const randomCorner = frameCorners[Math.floor(Math.random() * frameCorners.length)]; if (randomCorner) { randomCorner.style.animation = 'cornerFlash 0.5s ease-in-out'; setTimeout(() => { randomCorner.style.animation = ''}, 500)} }, 2000); setInterval(() => { const randomTech = techElements[Math.floor(Math.random() * techElements.length)]; if (randomTech) { randomTech.style.boxShadow = '0 0 20px rgba(255, 51, 102, 1)'; setTimeout(() => { randomTech.style.boxShadow = ''}, 800)} }, 3000); if (!document.querySelector('#corner-flash-style')) { const style = document.createElement('style'); style.id = 'corner-flash-style'; style.textContent = ` @keyframes cornerFlash { 0%, 100% { border-color: var(--accent-cyan); box-shadow: 0 0 10px rgba(0, 212, 255, 0.3)} 50% { border-color: var(--accent-electric); box-shadow: 0 0 30px rgba(0, 255, 255, 0.8); transform: scale(1.2)} } `; document.head.appendChild(style)} } createDataStreams() { const streamCount = 4; for (let i = 0; i < streamCount; i++) { const stream = document.createElement('div'); stream.className = 'data-stream-line'; stream.style.cssText = ` position: absolute; width: 2px; height: 60px; background: linear-gradient(to bottom, transparent, #00d4ff, transparent); z-index: 25; opacity: 0.7; animation: streamFlow ${3 + i}s ease-in-out infinite; animation-delay: ${i * 0.8}s; `; const positions = [ { top: '-30px', left: '25%' }, { top: '25%', right: '-30px' }, { bottom: '-30px', right: '25%' }, { top: '75%', left: '-30px' } ]; Object.assign(stream.style, positions[i]); this.heroAvatar.appendChild(stream)} if (!document.querySelector('#stream-style')) { const style = document.createElement('style'); style.id = 'stream-style'; style.textContent = ` @keyframes streamFlow { 0%, 100% { opacity: 0.3; transform: scale(1)} 50% { opacity: 0.9; transform: scale(1.2)} } `; document.head.appendChild(style)} } initInteractiveElements() { if (this.heroAvatar) { this.heroAvatar.addEventListener('mouseenter', () => { this.activateFrameEffects()}); this.heroAvatar.addEventListener('mouseleave', () => { this.deactivateFrameEffects()})} } activateFrameEffects() { const dataParticles = this.heroAvatar.querySelectorAll('.data-particle'); const scanLines = this.heroAvatar.querySelectorAll('.scan-line'); dataParticles.forEach(particle => { particle.style.animationDuration = '2s'; particle.style.opacity = '1'}); scanLines.forEach(line => { line.style.animationDuration = '1.5s'; line.style.opacity = '1'})} deactivateFrameEffects() { const dataParticles = this.heroAvatar.querySelectorAll('.data-particle'); const scanLines = this.heroAvatar.querySelectorAll('.scan-line'); dataParticles.forEach(particle => { particle.style.animationDuration = ''; particle.style.opacity = ''}); scanLines.forEach(line => { line.style.animationDuration = ''; line.style.opacity = ''})} initCyberTyping() { const elements = document.querySelectorAll('.cyber-type'); elements.forEach((element, index) => { const text = element.textContent; element.textContent = ''; element.style.borderRight = '2px solid #00d4ff'; element.style.animation = 'cyber-cursor 1s infinite'; setTimeout(() => { this.cyberTypeText(element, text, 80)}, index * 1000)})} cyberTypeText(element, text, speed) { let i = 0; const typeInterval = setInterval(() => { element.textContent += text.charAt(i); if (Math.random() < 0.1) { const glitchChar = '!@#$%^&*()_+-=[]{}|;:,.<>?'[Math.floor(Math.random() * 25)]; element.textContent = element.textContent.slice(0, -1) + glitchChar; setTimeout(() => { element.textContent = element.textContent.slice(0, -1) + text.charAt(i)}, 50)} i++; if (i >= text.length) { clearInterval(typeInterval); element.style.borderRight = 'none'} }, speed)} } class NeuralNetworkVisualizer { constructor() { this.container = null; this.nodes = []; this.connections = []; this.animationId = null} init() { this.createContainer(); this.generateNetwork(); this.animate()} createContainer() { this.container = document.createElement('div'); this.container.className = 'neural-network'; this.container.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 100%; pointer-events: none; z-index: -1; opacity: 0.3; `; document.body.appendChild(this.container)} generateNetwork() { const layers = [6, 8, 6, 4]; const layerSpacing = window.innerWidth / (layers.length + 1); layers.forEach((nodeCount, layerIndex) => { const nodeSpacing = window.innerHeight / (nodeCount + 1); for (let i = 0; i < nodeCount; i++) { const node = document.createElement('div'); node.className = 'neural-node'; const x = layerSpacing * (layerIndex + 1); const y = nodeSpacing * (i + 1); node.style.cssText = ` position: absolute; width: 8px; height: 8px; border-radius: 50%; background: #00d4ff; left: ${x}px; top: ${y}px; transform: translate(-50%, -50%); box-shadow: 0 0 10px #00d4ff; transition: all 0.3s ease; `; this.container.appendChild(node); this.nodes.push({ element: node, x, y, layer: layerIndex, active: false }); if (layerIndex < layers.length - 1) { const nextLayerNodes = layers[layerIndex + 1]; const nextNodeSpacing = window.innerHeight / (nextLayerNodes + 1); for (let j = 0; j < nextLayerNodes; j++) { const nextX = layerSpacing * (layerIndex + 2); const nextY = nextNodeSpacing * (j + 1); const connection = document.createElement('div'); connection.className = 'neural-connection'; const length = Math.sqrt((nextX - x) ** 2 + (nextY - y) ** 2); const angle = Math.atan2(nextY - y, nextX - x) * 180 / Math.PI; connection.style.cssText = ` position: absolute; width: ${length}px; height: 1px; background: linear-gradient(90deg, #00d4ff40, transparent); left: ${x}px; top: ${y}px; transform-origin: 0 0; transform: rotate(${angle}deg); opacity: 0.2; transition: opacity 0.3s ease; `; this.container.appendChild(connection); this.connections.push({ element: connection, from: this.nodes.length - 1, to: j })} } } })} animate() { setInterval(() => { this.nodes.forEach(node => { if (Math.random() < 0.1) { node.active = !node.active; node.element.style.background = node.active ? '#ff3366' : '#00d4ff'; node.element.style.boxShadow = `0 0 ${node.active ? 15 : 10}px ${node.active ? '#ff3366' : '#00d4ff'}`} }); this.connections.forEach(connection => { if (Math.random() < 0.05) { connection.element.style.opacity = Math.random() * 0.8 + 0.2} })}, 200)} } class SkillsSystem { constructor() { this.skillCategories = document.querySelectorAll('.skill-category'); this.skillBars = document.querySelectorAll('.skill-progress')} init() { this.initSkillHovers(); this.initSkillProgress(); this.initSkillAnimations()} initSkillHovers() { this.skillCategories.forEach(category => { category.addEventListener('mouseenter', () => { this.activateCategory(category)}); category.addEventListener('mouseleave', () => { this.deactivateCategory(category)})})} activateCategory(category) { const categoryType = category.getAttribute('data-category'); const colors = { frontend: '#00d4ff', backend: '#ff3366', tools: '#00ffff' }; const color = colors[categoryType] || '#00d4ff'; category.style.borderColor = color; category.style.boxShadow = `0 0 20px ${color}40`; category.style.transform = 'translateY(-5px) scale(1.02)'; const skillBars = category.querySelectorAll('.skill-progress'); skillBars.forEach(bar => { bar.style.boxShadow = `0 0 10px ${color}60`})} deactivateCategory(category) { category.style.borderColor = '#00d4ff'; category.style.boxShadow = 'none'; category.style.transform = 'translateY(0) scale(1)'; const skillBars = category.querySelectorAll('.skill-progress'); skillBars.forEach(bar => { bar.style.boxShadow = 'none'})} initSkillProgress() { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const progressBars = entry.target.querySelectorAll('.skill-progress'); progressBars.forEach((bar, index) => { setTimeout(() => { const width = bar.getAttribute('data-width'); if (width) { bar.style.width = width; this.animateSkillBar(bar)} }, index * 200)}); observer.unobserve(entry.target)} })}, { threshold: 0.3 }); this.skillCategories.forEach(category => { observer.observe(category)})} initSkillAnimations() { const skillItems = document.querySelectorAll('.skill-item'); skillItems.forEach((item, index) => { item.style.animationDelay = `${index * 0.1}s`; item.addEventListener('mouseenter', () => { item.style.animation = 'skillPulse 0.6s ease-in-out'}); item.addEventListener('animationend', () => { item.style.animation = ''})}); if (!document.querySelector('#skill-animations')) { const style = document.createElement('style'); style.id = 'skill-animations'; style.textContent = ` @keyframes skillPulse { 0% { transform: scale(1)} 50% { transform: scale(1.05)} 100% { transform: scale(1)} } @keyframes skillGlow { 0%, 100% { box-shadow: 0 0 5px #00d4ff40} 50% { box-shadow: 0 0 15px #00d4ff80} } `; document.head.appendChild(style)} } animateSkillBar(bar) { bar.style.background = 'linear-gradient(90deg, #00d4ff, #ff3366, #00d4ff)'; bar.style.backgroundSize = '200% 100%'; bar.style.animation = 'skillGlow 2s ease-in-out infinite'} } class ContactSystem { constructor() { this.form = document.getElementById('contact-form'); this.formInputs = document.querySelectorAll('.form-input'); this.submitBtn = document.querySelector('.form-submit')} init() { this.initFormValidation(); this.initFormSubmission(); this.initInputEffects()} initFormValidation() { this.formInputs.forEach(input => { input.addEventListener('blur', () => { this.validateField(input)}); input.addEventListener('focus', () => { this.clearFieldError(input)})})} validateField(field) { const value = field.value.trim(); const fieldType = field.type; let isValid = true; if (!value) { isValid = false} else if (fieldType === 'email') { const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/; isValid = emailRegex.test(value)} if (!isValid) { this.showFieldError(field)} else { this.clearFieldError(field)} return isValid} showFieldError(field) { field.style.borderColor = '#ff3366'; field.style.boxShadow = '0 0 10px rgba(255, 51, 102, 0.5)'} clearFieldError(field) { field.style.borderColor = ''; field.style.boxShadow = ''} initFormSubmission() { this.form.addEventListener('submit', (e) => { e.preventDefault(); let isFormValid = true; this.formInputs.forEach(input => { if (!this.validateField(input)) { isFormValid = false} }); if (isFormValid) { this.submitForm()} else { this.showNotification('Please fix the errors in the form.', 'error')} })} submitForm() { this.submitBtn.innerHTML = '<span class="btn-text">TRANSMITTING...</span>'; this.submitBtn.disabled = true; const statusText = document.querySelector('.form-status .status-text'); const statusIndicator = document.querySelector('.form-status .status-indicator'); statusText.textContent = 'TRANSMITTING'; statusIndicator.style.background = '#ff6b35'; setTimeout(() => { this.showNotification('Message transmitted successfully!', 'success'); this.form.reset(); this.submitBtn.innerHTML = '<span class="btn-text">TRANSMIT MESSAGE</span>'; this.submitBtn.disabled = false; statusText.textContent = 'READY'; statusIndicator.style.background = '#00d4ff'}, 2000)} initInputEffects() { this.formInputs.forEach(input => { input.addEventListener('focus', () => { const inputLine = input.nextElementSibling; if (inputLine && inputLine.classList.contains('input-line')) { inputLine.style.width = '100%'} }); input.addEventListener('blur', () => { const inputLine = input.nextElementSibling; if (inputLine && inputLine.classList.contains('input-line')) { inputLine.style.width = '0%'} })})} showNotification(message, type) { const existingNotification = document.querySelector('.cyber-notification'); if (existingNotification) { existingNotification.remove()} const notification = document.createElement('div'); notification.className = `cyber-notification ${type}`; notification.innerHTML = ` <div class="notification-content"> <span class="notification-icon">${type === 'success' ? '✓' : '⚠'}</span> <span class="notification-message">${message}</span> <button class="notification-close">×</button> </div> `; const colors = { success: '#00d4ff', error: '#ff3366', warning: '#ff6b35' }; notification.style.cssText = ` position: fixed; top: 100px; right: 20px; background: rgba(13, 20, 33, 0.95); border: 1px solid ${colors[type]}; color: #f0f2f5; padding: 1rem 1.5rem; border-radius: 0.5rem; box-shadow: 0 0 20px ${colors[type]}40; z-index: 1001; transform: translateX(100%); transition: transform 0.3s ease-out; backdrop-filter: blur(10px); font-family: 'Rajdhani', sans-serif; `; const content = notification.querySelector('.notification-content'); content.style.cssText = ` display: flex; align-items: center; gap: 1rem; `; const closeBtn = notification.querySelector('.notification-close'); closeBtn.style.cssText = ` background: none; border: none; color: ${colors[type]}; font-size: 1.5rem; cursor: pointer; padding: 0; margin-left: auto; `; document.body.appendChild(notification); setTimeout(() => { notification.style.transform = 'translateX(0)'}, 100); const autoRemove = setTimeout(() => { this.removeNotification(notification)}, 5000); closeBtn.addEventListener('click', () => { clearTimeout(autoRemove); this.removeNotification(notification)})} removeNotification(notification) { notification.style.transform = 'translateX(100%)'; setTimeout(() => { if (notification.parentNode) { notification.parentNode.removeChild(notification)} }, 300)} } function debounce(func, wait) { let timeout; return function executedFunction(...args) { const later = () => { clearTimeout(timeout); func(...args)}; clearTimeout(timeout); timeout = setTimeout(later, wait)}} class TerminalSystem { constructor() { this.terminalInput = document.getElementById('terminal-input'); this.terminalOutput = document.getElementById('terminal-output'); this.commandHistory = []; this.historyIndex = -1; this.currentPath = '~'; this.commands = { help: () => this.showHelp(), about: () => this.showAbout(), skills: () => this.showSkills(), projects: () => this.showProjects(), contact: () => this.showContact(), education: () => this.showEducation(), certificates: () => this.showCertificates(), clear: () => this.clearTerminal(), whoami: () => this.showWhoAmI(), ls: () => this.listDirectory(), pwd: () => this.showCurrentPath(), date: () => this.showDate(), echo: (args) => this.echo(args) }} init() { if (!this.terminalInput || !this.terminalOutput) return; this.terminalInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { this.processCommand()} else if (e.key === 'ArrowUp') { e.preventDefault(); this.navigateHistory(-1)} else if (e.key === 'ArrowDown') { e.preventDefault(); this.navigateHistory(1)} }); const terminal = document.querySelector('.interactive-terminal'); if (terminal) { terminal.addEventListener('click', () => { this.terminalInput.focus()})} } processCommand() { const input = this.terminalInput.value.trim(); if (!input) return; this.addToHistory(input); this.addOutput(`sudip@portfolio:${this.currentPath}$ ${input}`); const [command, ...args] = input.toLowerCase().split(' '); if (this.commands[command]) { this.commands[command](args.join(' '))} else { this.addOutput(`Command not found: ${command}. Type 'help' for available commands.`, 'error')} this.terminalInput.value = ''; this.scrollToBottom()} addToHistory(command) { this.commandHistory.push(command); this.historyIndex = this.commandHistory.length} navigateHistory(direction) { if (this.commandHistory.length === 0) return; this.historyIndex += direction; if (this.historyIndex < 0) { this.historyIndex = 0} else if (this.historyIndex >= this.commandHistory.length) { this.historyIndex = this.commandHistory.length; this.terminalInput.value = ''; return} this.terminalInput.value = this.commandHistory[this.historyIndex] || ''} addOutput(text, type = 'normal') { const outputLine = document.createElement('div'); outputLine.className = `terminal-line ${type}`; outputLine.innerHTML = text; this.terminalOutput.appendChild(outputLine)} scrollToBottom() { const terminalBody = document.getElementById('terminal-body'); if (terminalBody) { terminalBody.scrollTop = terminalBody.scrollHeight} } showHelp() { const helpText = ` <span class="terminal-header">Available Commands:</span> <span class="command-help">help - Show this help message</span> <span class="command-help">about - Display personal information</span> <span class="command-help">skills - List technical skills</span> <span class="command-help">projects - Show project portfolio</span> <span class="command-help">contact - Get contact information</span> <span class="command-help">education - Show educational background</span> <span class="command-help">certificates- List certifications</span> <span class="command-help">whoami - Display current user</span> <span class="command-help">clear - Clear terminal screen</span> <span class="command-help">ls - List directory contents</span> <span class="command-help">pwd - Show current directory</span> <span class="command-help">date - Show current date and time</span> <span class="command-help">echo [text] - Display text</span> `; this.addOutput(helpText)} showAbout() { const aboutText = ` <span class="terminal-header">About Sudip Mishra:</span> <span class="info-line">Name: Sudip Mishra</span> <span class="info-line">Role: B.Tech Computer Science Student</span> <span class="info-line">Institution: University of Engineering and Management, Kolkata</span> <span class="info-line">CGPA: 7.60 (up to 4th Semester)</span> <span class="info-line">Expected Graduation: 2026</span> <span class="info-line">Location: Hoomgarh, West Midnapur, 721157</span> <span class="info-line">Specialization: AI/ML, Database Systems, Programming</span> <span class="info-line">Description: Proactive individual who embraces challenges and is highly adaptable.</span> `; this.addOutput(aboutText)} showSkills() { const skillsText = ` <span class="terminal-header">Technical Skills:</span> <span class="skill-category">Programming Languages:</span> <span class="skill-item">• Python (Advanced)</span> <span class="skill-item">• C Programming (Intermediate)</span> <span class="skill-item">• SQL (Intermediate)</span> <span class="skill-category">AI/ML & Data:</span> <span class="skill-item">• Artificial Intelligence</span> <span class="skill-item">• Machine Learning</span> <span class="skill-item">• Database Management Systems</span> <span class="skill-item">• OpenCV</span> <span class="skill-category">Soft Skills:</span> <span class="skill-item">• Problem Solving</span> <span class="skill-item">• Teamwork</span> <span class="skill-item">• Adaptability</span> <span class="skill-item">• Time Management</span> <span class="skill-item">• Creativity</span> <span class="skill-category">Languages:</span> <span class="skill-item">• English (Fluent)</span> <span class="skill-item">• Hindi (Fluent)</span> <span class="skill-item">• Bengali (Native)</span> `; this.addOutput(skillsText)} showProjects() { const projectsText = ` <span class="terminal-header">Project Portfolio:</span> <span class="project-title">1. SmartWardrobe - AI Color Recommendation System</span> <span class="project-desc"> • Developed ML model using OpenCV and Google Colab</span> <span class="project-desc"> • Recommends shirts/T-shirts based on color analysis</span> <span class="project-desc"> • Technologies: Python, OpenCV, Machine Learning</span> <span class="project-desc"> • Status: Ongoing</span> <span class="project-title">2. Automatic Fan Regulator - Arduino Based</span> <span class="project-desc"> • Arduino-based fan speed controller system</span> <span class="project-desc"> • Automatically adjusts based on temperature & humidity</span> <span class="project-desc"> • Technologies: Arduino, C++, Sensors, IoT</span> <span class="project-desc"> • Status: Completed</span> `; this.addOutput(projectsText)} showContact() { const contactText = ` <span class="terminal-header">Contact Information:</span> <span class="contact-item">Email: sudipmishra689@gmail.com</span> <span class="contact-item">Phone: +91 6297471334</span> <span class="contact-item">Address: Hoomgarh, West Midnapur, 721157</span> <span class="contact-item">LinkedIn: Available on request</span> <span class="contact-item">GitHub: github.com/sudipmishra689</span> `; this.addOutput(contactText)} showEducation() { const educationText = ` <span class="terminal-header">Educational Background:</span> <span class="edu-title">B.Tech in Computer Science (CSIT)</span> <span class="edu-detail">Institution: University of Engineering and Management, Kolkata</span> <span class="edu-detail">CGPA: 7.60 (up to 4th Semester)</span> <span class="edu-detail">Expected Graduation: 2026</span> <span class="edu-title">12th Higher Secondary (Science)</span> <span class="edu-detail">Institution: Hoomgarh Chandabila High School, WBCHSE</span> <span class="edu-detail">Graduated: 2022</span> <span class="edu-detail">Percentage: 87.2%</span> <span class="edu-title">10th Secondary (General)</span> <span class="edu-detail">Institution: Hoomgarh Chandabila High School, WBBSE</span> <span class="edu-detail">Graduated: 2020</span> <span class="edu-detail">Percentage: 69.71%</span> `; this.addOutput(educationText)} showCertificates() { const certificatesText = ` <span class="terminal-header">Certifications:</span> <span class="cert-item">✓ ML Foundations (Completed)</span> <span class="cert-item">✓ Python Essentials Training (Completed)</span> <span class="cert-item">✓ C Programming (Completed)</span> <span class="cert-item">✓ Database Foundations (Completed)</span> `; this.addOutput(certificatesText)} showWhoAmI() { this.addOutput('sudip')} listDirectory() { const dirText = ` <span class="dir-item">about.txt</span> <span class="dir-item">skills.json</span> <span class="dir-item">projects/</span> <span class="dir-item">contact.info</span> <span class="dir-item">education.md</span> <span class="dir-item">certificates/</span> `; this.addOutput(dirText)} showCurrentPath() { this.addOutput(`/home/sudip${this.currentPath}`)} showDate() { const now = new Date(); this.addOutput(now.toString())} echo(text) { this.addOutput(text || '')} clearTerminal() { this.terminalOutput.innerHTML = ''} } const loadingSystem = new LoadingSystem(); const particleSystem = new ParticleSystem(); const cyberEffects = new CyberEffects(); const navigationSystem = new NavigationSystem(); const heroAnimations = new HeroAnimations(); const skillsSystem = new SkillsSystem(); const contactSystem = new ContactSystem(); const terminalSystem = new TerminalSystem(); document.addEventListener('DOMContentLoaded', () => { loadingSystem.init(); terminalSystem.init()}); function createMatrixRain() { const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d'); canvas.style.position = 'fixed'; canvas.style.top = '0'; canvas.style.left = '0'; canvas.style.width = '100%'; canvas.style.height = '100%'; canvas.style.zIndex = '-2'; canvas.style.opacity = '0.1'; canvas.style.pointerEvents = 'none'; document.body.appendChild(canvas); function resizeCanvas() { canvas.width = window.innerWidth; canvas.height = window.innerHeight} resizeCanvas(); window.addEventListener('resize', resizeCanvas); const chars = '01'; const fontSize = 14; const columns = canvas.width / fontSize; const drops = []; for (let i = 0; i < columns; i++) { drops[i] = 1} function draw() { ctx.fillStyle = 'rgba(13, 20, 33, 0.05)'; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = '#00d4ff'; ctx.font = `${fontSize}px monospace`; for (let i = 0; i < drops.length; i++) { const text = chars[Math.floor(Math.random() * chars.length)]; ctx.fillText(text, i * fontSize, drops[i] * fontSize); if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) { drops[i] = 0} drops[i]++} } setInterval(draw, 100)} setTimeout(() => { if (isLoaded) { createMatrixRain()} }, 2000); document.addEventListener('keydown', (e) => { if (e.ctrlKey && e.shiftKey && e.key === 'C') { e.preventDefault(); document.getElementById('contact').scrollIntoView({ behavior: 'smooth' })} if (e.ctrlKey && e.shiftKey && e.key === 'P') { e.preventDefault(); document.getElementById('projects').scrollIntoView({ behavior: 'smooth' })} if (e.key === 'Escape') { const navToggle = document.getElementById('nav-toggle'); const navMenu = document.getElementById('nav-menu'); navToggle.classList.remove('active'); navMenu.classList.remove('active')} }); console.log(` %c ╔═══════════════════════════════════════╗ ║ CYBER PORTFOLIO ║ ║ SYSTEM INITIALIZED ║ ║ ║ ║ Welcome to the digital realm! ║ ║ Type 'help()' for available commands ║ ╚═══════════════════════════════════════╝ `, 'color: #00d4ff; font-family: monospace; font-size: 12px;'); window.help = function() { console.log(` %cAvailable Commands: - contact() - Navigate to contact section - projects() - Navigate to projects section - skills() - Navigate to skills section - certificates() - Navigate to certificates section - about() - Navigate to about section - glitch() - Trigger random glitch effect - matrix() - Toggle matrix rain effect `, 'color: #00d4ff; font-family: monospace;')}; window.contact = () => document.getElementById('contact').scrollIntoView({ behavior: 'smooth' }); window.projects = () => document.getElementById('projects').scrollIntoView({ behavior: 'smooth' }); window.skills = () => document.getElementById('skills').scrollIntoView({ behavior: 'smooth' }); window.certificates = () => document.getElementById('certificates').scrollIntoView({ behavior: 'smooth' }); window.about = () => document.getElementById('about').scrollIntoView({ behavior: 'smooth' }); window.glitch = function() { const elements = document.querySelectorAll('[data-text]'); const randomElement = elements[Math.floor(Math.random() * elements.length)]; cyberEffects.triggerGlitch(randomElement)}; class SkillsSystem { constructor() { this.skillBars = document.querySelectorAll('.skill-progress')} init() { this.animateSkillBars()} animateSkillBars() { const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const skillBars = entry.target.querySelectorAll('.skill-progress'); skillBars.forEach((bar, index) => { setTimeout(() => { const width = bar.getAttribute('data-width'); if (width) { bar.style.width = width} }, index * 200)})} })}, { threshold: 0.5 }); const skillCategories = document.querySelectorAll('.skill-category'); skillCategories.forEach(category => observer.observe(category))} } class ContactSystem { constructor() { this.contactForm = document.getElementById('contact-form')} init() { if (this.contactForm) { this.contactForm.addEventListener('submit', (e) => this.handleSubmit(e))} } handleSubmit(e) { e.preventDefault(); const formData = new FormData(this.contactForm); const name = formData.get('name'); const email = formData.get('email'); const subject = formData.get('subject'); const message = formData.get('message'); if (!name || !email || !subject || !message) { this.showMessage('Please fill in all fields.', 'error'); return} this.showMessage('Message transmitted successfully! I\'ll get back to you soon.', 'success'); this.contactForm.reset()} showMessage(text, type) { const messageEl = document.createElement('div'); messageEl.className = `form-message ${type}`; messageEl.textContent = text; this.contactForm.parentNode.insertBefore(messageEl, this.contactForm.nextSibling); setTimeout(() => { messageEl.remove()}, 5000)} } class TerminalSystem { constructor() { this.terminalInput = null; this.terminalOutput = null; this.commandHistory = []; this.historyIndex = -1; this.currentDirectory = '~'; this.isInitialized = false; this.commands = { help: { description: 'Show all available commands', execute: () => this.showHelp() }, about: { description: 'Display personal information', execute: () => this.showAbout() }, skills: { description: 'List technical skills and proficiency', execute: () => this.showSkills() }, projects: { description: 'Display project portfolio', execute: () => this.showProjects() }, contact: { description: 'Get contact information', execute: () => this.showContact() }, education: { description: 'Show educational background', execute: () => this.showEducation() }, experience: { description: 'Display work experience', execute: () => this.showExperience() }, certificates: { description: 'List certifications', execute: () => this.showCertificates() }, clear: { description: 'Clear terminal screen', execute: () => this.clearTerminal() }, whoami: { description: 'Display current user', execute: () => this.whoami() }, date: { description: 'Show current date and time', execute: () => this.showDate() }, pwd: { description: 'Print working directory', execute: () => this.pwd() }, ls: { description: 'List directory contents', execute: () => this.listDirectory() }, cat: { description: 'Display file contents (usage: cat <filename>)', execute: (args) => this.catFile(args) }, echo: { description: 'Display text (usage: echo <text>)', execute: (args) => this.echo(args) }, theme: { description: 'Change terminal theme (usage: theme <color>)', execute: (args) => this.changeTheme(args) }, matrix: { description: 'Activate matrix mode', execute: () => this.matrixMode() }, hack: { description: 'Initiate hacking sequence', execute: () => this.hackSequence() }, sudo: { description: 'Execute command as administrator', execute: (args) => this.sudo(args) }, glitch: { description: 'Trigger glitch effect', execute: () => this.glitchEffect() }, status: { description: 'Show system status', execute: () => this.showSystemStatus() } }} init() { this.terminalInput = document.getElementById('terminal-input'); this.terminalOutput = document.getElementById('terminal-output'); if (!this.terminalInput || !this.terminalOutput) { console.warn('🔍 Terminal elements not found during init, will retry...'); setTimeout(() => this.retryInit(), 1000); return} this.setupTerminal()} retryInit() { this.terminalInput = document.getElementById('terminal-input'); this.terminalOutput = document.getElementById('terminal-output'); if (!this.terminalInput || !this.terminalOutput) { console.warn('❌ Terminal elements still not found, creating fallback message'); this.createFallbackMessage(); return} console.log('✅ Terminal elements found on retry!'); this.setupTerminal()} createFallbackMessage() { const terminalSection = document.querySelector('#terminal'); if (terminalSection) { const message = document.createElement('div'); message.style.cssText = ` color: #ff3366; text-align: center; padding: 20px; font-family: 'Rajdhani', monospace; font-size: 1.2rem; `; message.innerHTML = '⚠️ Terminal initializing... Please refresh if this persists.'; terminalSection.appendChild(message)} } setupTerminal() { if (this.isInitialized) { console.log('⚠️ Terminal already initialized'); return} console.log('🚀 Setting up terminal system...'); console.log('📍 Terminal Input:', this.terminalInput); console.log('📍 Terminal Output:', this.terminalOutput); if (!this.terminalInput || !this.terminalOutput) { console.error('❌ Terminal elements not found in setupTerminal'); return} console.log('🔗 Adding event listeners...'); this.terminalInput.addEventListener('keydown', (e) => { console.log('🎯 Keydown event triggered'); this.handleKeyDown(e)}); this.terminalInput.addEventListener('input', () => this.updateCursor()); const terminalBody = document.getElementById('terminal-body'); if (terminalBody) { terminalBody.addEventListener('click', () => { console.log('🖱️ Terminal clicked - focusing input'); this.terminalInput.focus()})} setTimeout(() => { if (this.terminalInput) { this.terminalInput.focus(); console.log('🎯 Terminal input focused')} }, 500); this.animateStatusBars(); this.addWelcomeMessage(); this.isInitialized = true; console.log('✅ Terminal system fully initialized!'); setTimeout(() => { console.log('🧪 Testing terminal...'); this.addToOutput('<div class="terminal-response" style="color: #00ff88;">✅ Terminal is ready! Type "help" to get started.</div>')}, 1000)} addWelcomeMessage() { const welcomeMsg = `<div class="terminal-response" style="color: #00d4ff; margin-bottom: 10px;"> ╔═══════════════════════════════════════════════════════════════╗ ║ 🚀 TERMINAL SYSTEM ONLINE 🚀 ║ ║ ║ ║ Welcome to Sudip's Interactive Portfolio Terminal! ║ ║ Type 'help' to see all available commands. ║ ║ Use ↑/↓ arrows to navigate command history. ║ ║ Press Tab for auto-completion. ║ ╚═══════════════════════════════════════════════════════════════╝ </div>`; this.addToOutput(welcomeMsg)} handleKeyDown(e) { console.log('⌨️ Key pressed:', e.key); switch(e.key) { case 'Enter': console.log('🔥 Enter key pressed - executing command'); e.preventDefault(); this.executeCommand(); break; case 'ArrowUp': e.preventDefault(); this.navigateHistory(-1); break; case 'ArrowDown': e.preventDefault(); this.navigateHistory(1); break; case 'Tab': e.preventDefault(); this.autoComplete(); break} } executeCommand() { console.log('🚀 Execute command called'); if (!this.terminalInput) { console.error('❌ Terminal input not found'); return} const input = this.terminalInput.value.trim(); console.log('📝 Input:', input); if (!input) return; this.commandHistory.push(input); this.historyIndex = this.commandHistory.length; this.addToOutput(`<div class="terminal-line"> <span class="terminal-prompt">sudip@portfolio:${this.currentDirectory}$ </span> <span class="terminal-command">${input}</span> </div>`); const [command, ...args] = input.toLowerCase().split(' '); console.log('🔧 Executing command:', command, 'with args:', args); if (this.commands[command]) { try { this.commands[command].execute(args); console.log('✅ Command executed successfully')} catch (error) { console.error('❌ Command execution error:', error); this.addToOutput(`<div class="terminal-error">Error executing command: ${error.message}</div>`)} } else { this.addToOutput(`<div class="terminal-error">Command not found: ${command}. Type 'help' for available commands.</div>`)} this.terminalInput.value = ''; this.scrollToBottom()} addToOutput(content) { if (!this.terminalOutput) { console.warn('Terminal output element not found'); return} this.terminalOutput.innerHTML += content; this.scrollToBottom()} scrollToBottom() { const terminalBody = document.getElementById('terminal-body'); if (terminalBody) { terminalBody.scrollTop = terminalBody.scrollHeight} } navigateHistory(direction) { if (this.commandHistory.length === 0) return; this.historyIndex += direction; if (this.historyIndex < 0) { this.historyIndex = 0} else if (this.historyIndex >= this.commandHistory.length) { this.historyIndex = this.commandHistory.length; this.terminalInput.value = ''; return} this.terminalInput.value = this.commandHistory[this.historyIndex] || ''} autoComplete() { const input = this.terminalInput.value.toLowerCase(); const matches = Object.keys(this.commands).filter(cmd => cmd.startsWith(input)); if (matches.length === 1) { this.terminalInput.value = matches[0]} else if (matches.length > 1) { this.addToOutput(`<div class="terminal-response">${matches.join(' ')}</div>`); this.scrollToBottom()} } updateCursor() { } showHelp() { let helpText = '<div class="terminal-response">Available commands:\n\n'; Object.entries(this.commands).forEach(([cmd, info]) => { helpText += ` <span style="color: var(--accent-cyan)">${cmd.padEnd(12)}</span> - ${info.description}\n`}); helpText += '\nUse arrow keys to navigate command history.\nPress Tab for auto-completion.</div>'; this.addToOutput(helpText)} showAbout() { const aboutText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ SUDIP MISHRA ║ ║ Computer Science Engineer ║ ╚══════════════════════════════════════════════════════════════╝ Name: Sudip Mishra Role: Computer Science Engineering Student Graduation: 2024 Institution: Government Engineering College Location: India Specialization: AI/ML, Cybersecurity, Data Structures Interests: Machine Learning, Software Development, Cybersecurity Mission: To contribute to cutting-edge technology projects while continuously learning and growing in the field of computer science. Status: Available for opportunities and collaborations </div>`; this.addToOutput(aboutText)} showSkills() { const skillsText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ TECHNICAL SKILLS ║ ╚══════════════════════════════════════════════════════════════╝ PROGRAMMING LANGUAGES: • Python ████████████████████████░░░░ 75% • C Programming ████████████████████░░░░░░░░ 65% • JavaScript ██████████████████░░░░░░░░░░ 60% • HTML/CSS ████████████████████████████ 85% FRAMEWORKS & LIBRARIES: • Django ████████████████████░░░░░░░░ 65% • Flask ██████████████████░░░░░░░░░░ 60% • TensorFlow ████████████████░░░░░░░░░░░░ 50% • Pandas ████████████████████░░░░░░░░ 65% DATABASES: • MySQL ████████████████████░░░░░░░░ 65% • SQLite ██████████████████████░░░░░░ 70% TOOLS & TECHNOLOGIES: • Git/GitHub ████████████████████████░░░░ 75% • Linux ██████████████████░░░░░░░░░░ 60% • VS Code ████████████████████████████ 85% • Wireshark ████████████████░░░░░░░░░░░░ 50% </div>`; this.addToOutput(skillsText)} showProjects() { const projectsText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ PROJECT PORTFOLIO ║ ╚══════════════════════════════════════════════════════════════╝ [01] MACHINE LEARNING CLASSIFIER • Developed ML model for data classification • Technologies: Python, Scikit-learn, Pandas • Status: Completed [02] CYBERSECURITY TOOLKIT • Network security analysis and monitoring tools • Technologies: Python, Wireshark, Scapy • Status: Active Development [03] STUDENT MANAGEMENT PORTAL • Comprehensive student information system • Technologies: Python, Django, MySQL, Bootstrap • Status: Completed [04] DATA ANALYSIS DASHBOARD • Interactive data visualization platform • Technologies: Python, Pandas, Matplotlib, Streamlit • Status: Completed [05] NETWORK SECURITY ANALYZER • Network traffic analysis for threat detection • Technologies: Python, Wireshark, Scapy, TensorFlow • Status: Completed [06] E-COMMERCE WEB APPLICATION • Full-stack e-commerce platform • Technologies: HTML/CSS, JavaScript, PHP, MySQL • Status: Completed [07] CHATBOT WITH NLP • Intelligent chatbot with natural language processing • Technologies: Python, NLTK, Flask, SQLite • Status: Completed [08] PORTFOLIO WEBSITE • This futuristic portfolio with cyber theme • Technologies: HTML5, CSS3, JavaScript, Animations • Status: Active (You're viewing it!) Type 'projects --detail <number>' for more information about a specific project. </div>`; this.addToOutput(projectsText)} showContact() { const contactText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ CONTACT INFORMATION ║ ╚══════════════════════════════════════════════════════════════╝ Email: sudip.mishra@example.com Phone: +91 XXXXX XXXXX Location: India LinkedIn: linkedin.com/in/sudip-mishra GitHub: github.com/sudip-mishra Availability: Open to opportunities and collaborations Response Time: Usually within 24 hours Preferred: Email for formal communications ╔══════════════════════════════════════════════════════════════╗ ║ Feel free to reach out for projects, collaborations, or ║ ║ just to connect! I'm always excited to discuss technology ║ ║ and explore new opportunities. ║ ╚══════════════════════════════════════════════════════════════╝ </div>`; this.addToOutput(contactText)} showEducation() { const educationText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ EDUCATIONAL BACKGROUND ║ ╚══════════════════════════════════════════════════════════════╝ DEGREE: Bachelor of Technology (B.Tech) SPECIALIZATION: Computer Science & Engineering INSTITUTION: Government Engineering College GRADUATION: 2024 CGPA: [Confidential] RELEVANT COURSEWORK: • Data Structures and Algorithms • Machine Learning and AI • Database Management Systems • Computer Networks • Cybersecurity Fundamentals • Software Engineering • Operating Systems • Web Technologies ACADEMIC PROJECTS: • Final Year Project: Advanced ML Classification System • Network Security Analysis Tool • Database Management System for Educational Institute • Web-based Student Portal ACHIEVEMENTS: • Completed multiple technical certifications • Active participation in coding competitions • Technical workshop presentations </div>`; this.addToOutput(educationText)} showExperience() { const experienceText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ EXPERIENCE & PROJECTS ║ ╚══════════════════════════════════════════════════════════════╝ CURRENT STATUS: Recent Graduate (2024) FOCUS AREAS: Software Development, ML/AI, Cybersecurity PROJECT EXPERIENCE: ┌──────────────────────────────────────────────────────────────┐ │ Machine Learning Projects │ │ • Developed classification models using Python & Scikit-learn│ │ • Data analysis and visualization with Pandas & Matplotlib │ │ • Experience with TensorFlow for deep learning applications │ └──────────────────────────────────────────────────────────────┘ ┌──────────────────────────────────────────────────────────────┐ │ Web Development │ │ • Full-stack web applications using Django and Flask │ │ • Frontend development with HTML5, CSS3, JavaScript │ │ • Database integration with MySQL and SQLite │ └──────────────────────────────────────────────────────────────┘ ┌──────────────────────────────────────────────────────────────┐ │ Cybersecurity │ │ • Network traffic analysis using Wireshark and Scapy │ │ • Security tool development in Python │ │ • Vulnerability assessment and penetration testing basics │ └──────────────────────────────────────────────────────────────┘ SEEKING: Entry-level positions in Software Development, Machine Learning, or Cybersecurity roles. </div>`; this.addToOutput(experienceText)} showCertificates() { const certificatesText = `<div class="terminal-response"> ╔══════════════════════════════════════════════════════════════╗ ║ CERTIFICATIONS ║ ╚══════════════════════════════════════════════════════════════╝ [CERT_001] Python Programming Certification • Issuer: [Certification Authority] • Date: 2023 • Status: ✓ Verified [CERT_002] Machine Learning Fundamentals • Issuer: [Online Platform] • Date: 2023 • Status: ✓ Verified [CERT_003] Cybersecurity Basics • Issuer: [Security Institute] • Date: 2023 • Status: ✓ Verified [CERT_004] Web Development Certification • Issuer: [Tech Academy] • Date: 2023 • Status: ✓ Verified [CERT_005] Database Management • Issuer: [Database Institute] • Date: 2024 • Status: ✓ Verified Total Certifications: 5 All certificates are available for verification upon request. Note: Specific issuer names and certificate IDs can be provided during formal application processes. </div>`; this.addToOutput(certificatesText)} clearTerminal() { this.terminalOutput.innerHTML = ''} whoami() { this.addToOutput('<div class="terminal-response">sudip_mishra</div>')} showDate() { const now = new Date(); const dateStr = now.toLocaleString(); this.addToOutput(`<div class="terminal-response">${dateStr}</div>`)} pwd() { this.addToOutput(`<div class="terminal-response">/home/sudip${this.currentDirectory}</div>`)} listDirectory() { const files = [ 'about.txt', 'skills.json', 'projects/', 'contact.info', 'education.md', 'certificates/', 'resume.pdf', '.hidden_talents' ]; const fileList = files.map(file => { const isDir = file.endsWith('/'); const color = isDir ? 'var(--accent-cyan)' : 'var(--text-secondary)'; return `<span style="color: ${color}">${file}</span>`}).join(' '); this.addToOutput(`<div class="terminal-response">${fileList}</div>`)} catFile(args) { if (!args || args.length === 0) { this.addToOutput('<div class="terminal-error">Usage: cat <filename></div>'); return} const filename = args[0]; const files = { 'about.txt': 'Computer Science Engineering student passionate about ML and cybersecurity.', 'contact.info': 'Email: sudip.mishra@example.com\nLocation: India\nStatus: Available', 'resume.pdf': 'Binary file (use download command to get actual resume)', '.hidden_talents': 'Secret: I can solve a Rubik\'s cube in under 2 minutes! 🎲' }; if (files[filename]) { this.addToOutput(`<div class="terminal-response">${files[filename]}</div>`)} else { this.addToOutput(`<div class="terminal-error">cat: ${filename}: No such file or directory</div>`)} } echo(args) { if (!args || args.length === 0) { this.addToOutput('<div class="terminal-response"></div>'); return} const text = args.join(' '); this.addToOutput(`<div class="terminal-response">${text}</div>`)} changeTheme(args) { if (!args || args.length === 0) { this.addToOutput('<div class="terminal-response">Available themes: cyan, red, green, purple</div>'); return} const theme = args[0]; const themes = { cyan: '#00d4ff', red: '#ff3366', green: '#00ff88', purple: '#8844ff' }; if (themes[theme]) { document.documentElement.style.setProperty('--accent-cyan', themes[theme]); this.addToOutput(`<div class="terminal-response">Theme changed to ${theme}</div>`)} else { this.addToOutput('<div class="terminal-error">Invalid theme. Available: cyan, red, green, purple</div>')} } matrixMode() { this.addToOutput(`<div class="terminal-response" style="color: #00ff00;"> Entering Matrix Mode... Wake up, Neo... The Matrix has you... Follow the white rabbit... <span style="color: var(--accent-cyber-red);">Just kidding! 😄 But wouldn't that be cool?</span> </div>`)} hackSequence() { this.addToOutput('<div class="terminal-response">Initiating hack sequence...</div>'); const steps = [ 'Scanning network...', 'Found 127.0.0.1', 'Attempting to connect...', 'Connection established!', 'Bypassing firewall...', 'Access granted!', 'Downloading files...', 'Download complete!', '<span style="color: var(--accent-cyber-red);">Just kidding! This is just for fun. I\'m a ethical developer! 😊</span>' ]; let delay = 0; steps.forEach((step, index) => { setTimeout(() => { this.addToOutput(`<div class="terminal-response">${step}</div>`); this.scrollToBottom()}, delay); delay += 800})} sudo(args) { if (!args || args.length === 0) { this.addToOutput('<div class="terminal-error">sudo: command not specified</div>'); return} this.addToOutput(`<div class="terminal-response"> [sudo] password for sudip: ******** Sorry, you don't have sudo privileges on this portfolio! 😄 But feel free to explore with regular commands. </div>`)} animateStatusBars() { const statusBars = document.querySelectorAll('.status-fill'); if (statusBars.length === 0) { console.warn('No status bars found to animate'); return} statusBars.forEach((bar, index) => { setTimeout(() => { const randomWidth = Math.floor(Math.random() * 40) + 40; bar.style.width = `${randomWidth}%`; const valueElement = bar.parentElement.nextElementSibling; if (valueElement) { valueElement.textContent = `${randomWidth}%`} }, index * 500)}); setInterval(() => { statusBars.forEach(bar => { const currentWidth = parseInt(bar.style.width) || 50; const change = Math.floor(Math.random() * 10) - 5; const newWidth = Math.max(30, Math.min(90, currentWidth + change)); bar.style.width = `${newWidth}%`; const valueElement = bar.parentElement.nextElementSibling; if (valueElement) { valueElement.textContent = `${newWidth}%`} })}, 5000)} glitchEffect() { this.addToOutput(`<div class="terminal-response"> <span style="color: #ff3366; animation: glitch 0.3s ease-in-out infinite;"> G̴L̸I̴T̸C̷H̸ ̴E̷F̸F̸E̸C̴T̷ ̸A̷C̴T̸I̷V̴A̸T̴E̷D̸ </span> System experiencing temporal anomalies... Reality.exe has stopped working... Attempting to restore matrix integrity... <span style="color: #00d4ff;">✓ Glitch effect completed successfully!</span> </div>`)} showSystemStatus() { const uptime = Math.floor((Date.now() - performance.timeOrigin) / 1000); const hours = Math.floor(uptime / 3600); const minutes = Math.floor((uptime % 3600) / 60); const seconds = uptime % 60; this.addToOutput(`<div class="terminal-response"> ╔═══════════════════════════════════════════════════════════════╗ ║ SYSTEM STATUS ║ ╚═══════════════════════════════════════════════════════════════╝ HOSTNAME: sudip-portfolio KERNEL: CyberOS v2.0.24 UPTIME: ${hours}h ${minutes}m ${seconds}s PROCESSES: ${Math.floor(Math.random() * 150) + 100} running MEMORY: ${Math.floor(Math.random() * 4096) + 2048} MB used NETWORK: ONLINE - All systems operational SECURITY: Level 5 - Maximum encryption enabled ACTIVE MODULES: ✓ Particle Physics Engine ✓ Neural Network Visualizer ✓ Holographic Display System ✓ Cyber Effect Processors ✓ Interactive Terminal ✓ Matrix Rain Generator ✓ Security Protocols STATUS: 🟢 ALL SYSTEMS OPERATIONAL </div>`)} } const loadingSystem = new LoadingSystem(); const particleSystem = new ParticleSystem(); const cyberEffects = new CyberEffects(); const navigationSystem = new NavigationSystem(); const heroAnimations = new HeroAnimations(); const skillsSystem = new SkillsSystem(); const contactSystem = new ContactSystem(); const neuralNetworkVisualizer = new NeuralNetworkVisualizer(); class LoadingSystem { constructor() { this.loadingScreen = null; this.bootSequence = [ 'INITIALIZING CYBER PORTFOLIO...', 'LOADING NEURAL NETWORKS...', 'CONNECTING TO MAINFRAME...', 'ACTIVATING HOLOGRAPHIC DISPLAY...', 'CALIBRATING PARTICLE SYSTEMS...', 'ESTABLISHING SECURE CONNECTION...', 'LOADING COMPLETE!' ]} init() { this.createLoadingScreen(); this.startBootSequence()} createLoadingScreen() { this.loadingScreen = document.createElement('div'); this.loadingScreen.id = 'loading-screen'; this.loadingScreen.style.cssText = ` position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: linear-gradient(135deg, #0d1421, #1a2332); display: flex; flex-direction: column; justify-content: center; align-items: center; z-index: 10000; font-family: 'Rajdhani', monospace; color: #00d4ff; `; const logo = document.createElement('div'); logo.innerHTML = ` <div style="font-size: 3rem; margin-bottom: 2rem; text-align: center;"> <div style="border: 2px solid #00d4ff; padding: 1rem; border-radius: 10px;"> SUDIP MISHRA </div> </div> <div id="boot-text" style="font-size: 1.2rem; margin-bottom: 2rem; text-align: center; height: 30px;"></div> <div id="progress-container" style="width: 300px; height: 4px; background: #1a2332; border-radius: 2px; overflow: hidden;"> <div id="progress-bar" style="width: 0%; height: 100%; background: linear-gradient(90deg, #00d4ff, #ff3366); transition: width 0.3s ease;"></div> </div> `; this.loadingScreen.appendChild(logo); document.body.appendChild(this.loadingScreen)} startBootSequence() { const bootText = document.getElementById('boot-text'); const progressBar = document.getElementById('progress-bar'); let currentStep = 0; const bootInterval = setInterval(() => { if (currentStep < this.bootSequence.length) { bootText.textContent = this.bootSequence[currentStep]; progressBar.style.width = `${((currentStep + 1) / this.bootSequence.length) * 100}%`; currentStep++} else { clearInterval(bootInterval); setTimeout(() => { this.hideLoadingScreen()}, 1000)} }, 800)} hideLoadingScreen() { this.loadingScreen.style.opacity = '0'; this.loadingScreen.style.transform = 'scale(1.1)'; setTimeout(() => { this.loadingScreen.remove(); isLoaded = true; initializeSystems()}, 500)} } function initializeSystems() { try { console.log('🔧 Initializing all systems...'); try { particleSystem.init(); console.log('✅ Particle system initialized')} catch (e) { console.warn('⚠️ Particle system failed:', e.message)} try { cyberEffects.init(); console.log('✅ Cyber effects initialized')} catch (e) { console.warn('⚠️ Cyber effects failed:', e.message)} try { navigationSystem.init(); console.log('✅ Navigation system initialized')} catch (e) { console.warn('⚠️ Navigation system failed:', e.message)} try { heroAnimations.init(); console.log('✅ Hero animations initialized')} catch (e) { console.warn('⚠️ Hero animations failed:', e.message)} try { skillsSystem.init(); console.log('✅ Skills system initialized')} catch (e) { console.warn('⚠️ Skills system failed:', e.message)} try { contactSystem.init(); console.log('✅ Contact system initialized')} catch (e) { console.warn('⚠️ Contact system failed:', e.message)} try { neuralNetworkVisualizer.init(); console.log('✅ Neural network visualizer initialized')} catch (e) { console.warn('⚠️ Neural network visualizer failed:', e.message)} setTimeout(() => { try { createMatrixRain(); console.log('✅ Matrix rain initialized')} catch (e) { console.warn('⚠️ Matrix rain failed:', e.message)} }, 2000); console.log('✅ Core systems initialization complete')} catch (error) { console.error('❌ Critical error in system initialization:', error)} } document.addEventListener('DOMContentLoaded', function() { console.log('🚀 DOM loaded - starting cyber portfolio initialization...'); try { loadingSystem.init(); console.log('✅ Loading system started')} catch (error) { console.warn('⚠️ Loading system failed, initializing directly:', error); setTimeout(() => { isLoaded = true; initializeSystems()}, 1000)} }); function createMatrixRain() { const canvas = document.createElement('canvas'); const ctx = canvas.getContext('2d'); canvas.style.position = 'fixed'; canvas.style.top = '0'; canvas.style.left = '0'; canvas.style.width = '100%'; canvas.style.height = '100%'; canvas.style.zIndex = '-3'; canvas.style.opacity = '0.15'; canvas.style.pointerEvents = 'none'; document.body.appendChild(canvas); function resizeCanvas() { canvas.width = window.innerWidth; canvas.height = window.innerHeight} resizeCanvas(); window.addEventListener('resize', resizeCanvas); const chars = '01アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン'; const fontSize = 14; const columns = canvas.width / fontSize; const drops = []; for (let i = 0; i < columns; i++) { drops[i] = 1} function draw() { ctx.fillStyle = 'rgba(13, 20, 33, 0.05)'; ctx.fillRect(0, 0, canvas.width, canvas.height); ctx.fillStyle = '#00d4ff'; ctx.font = `${fontSize}px monospace`; for (let i = 0; i < drops.length; i++) { const text = chars[Math.floor(Math.random() * chars.length)]; ctx.fillText(text, i * fontSize, drops[i] * fontSize); if (drops[i] * fontSize > canvas.height && Math.random() > 0.975) { drops[i] = 0} drops[i]++} } setInterval(draw, 100)} class CursorEffects { constructor() { this.cursor = null; this.cursorDot = null; this.init()} init() { this.createCustomCursor(); this.addCursorEvents()} createCustomCursor() { this.cursorDot = document.createElement('div'); this.cursorDot.style.cssText = ` position: fixed; width: 8px; height: 8px; background: #00d4ff; border-radius: 50%; pointer-events: none; z-index: 9999; mix-blend-mode: exclusion; transition: transform 0.1s ease; `; document.body.appendChild(this.cursorDot); this.cursor = document.createElement('div'); this.cursor.style.cssText = ` position: fixed; width: 30px; height: 30px; border: 2px solid #00d4ff40; border-radius: 50%; pointer-events: none; z-index: 9998; transition: all 0.3s ease; `; document.body.appendChild(this.cursor)} addCursorEvents() { document.addEventListener('mousemove', (e) => { this.cursorDot.style.left = `${e.clientX - 4}px`; this.cursorDot.style.top = `${e.clientY - 4}px`; this.cursor.style.left = `${e.clientX - 15}px`; this.cursor.style.top = `${e.clientY - 15}px`}); const interactiveElements = document.querySelectorAll('a, button, .btn, .nav-link, .project-card, .skill-item'); interactiveElements.forEach(element => { element.addEventListener('mouseenter', () => { this.cursor.style.transform = 'scale(1.5)'; this.cursor.style.borderColor = '#ff3366'; this.cursorDot.style.background = '#ff3366'}); element.addEventListener('mouseleave', () => { this.cursor.style.transform = 'scale(1)'; this.cursor.style.borderColor = '#00d4ff40'; this.cursorDot.style.background = '#00d4ff'})})} } class PerformanceOptimizer { constructor() { this.isReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches; this.init()} init() { if (this.isReducedMotion) { this.disableHeavyAnimations()} this.optimizeAnimations(); this.addPerformanceMonitoring()} disableHeavyAnimations() { scanLinesActive = false; console.log('⚡ Reduced motion mode: Heavy animations disabled')} optimizeAnimations() { let ticking = false; const throttledScroll = () => { if (!ticking) { requestAnimationFrame(() => { ticking = false}); ticking = true} }; window.addEventListener('scroll', throttledScroll, { passive: true })} addPerformanceMonitoring() { let fps = 0; let lastTime = performance.now(); function measureFPS() { const currentTime = performance.now(); fps = 1000 / (currentTime - lastTime); lastTime = currentTime; if (fps < 30) { console.warn('⚠️ Low FPS detected, optimizing animations...')} requestAnimationFrame(measureFPS)} requestAnimationFrame(measureFPS)} } function addGlobalAnimations() { const style = document.createElement('style'); style.textContent = ` @keyframes cyber-cursor { 0%, 50% { border-right-color: transparent} 51%, 100% { border-right-color: #00d4ff} } .btn, button:not(.notification-close) { position: relative; overflow: hidden; transition: all 0.3s ease} .btn::before, button:not(.notification-close)::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, rgba(0, 212, 255, 0.2), transparent); transition: left 0.5s} .btn:hover::before, button:not(.notification-close):hover::before { left: 100%} .project-card, .certificate-card, .skill-category { transition: all 0.3s ease} .project-card:hover, .certificate-card:hover { transform: translateY(-10px) rotateX(5deg); box-shadow: 0 20px 40px rgba(0, 212, 255, 0.2)} @keyframes glitch { 0% { transform: translate(0)} 20% { transform: translate(-2px, 2px)} 40% { transform: translate(-2px, -2px)} 60% { transform: translate(2px, 2px)} 80% { transform: translate(2px, -2px)} 100% { transform: translate(0)} } .glitch-hover:hover { animation: glitch 0.3s ease-in-out infinite} @keyframes floatUp { 0% { transform: translateY(0px) rotate(0deg); opacity: 0.5} 50% { opacity: 1} 100% { transform: translateY(-20px) rotate(180deg); opacity: 0.5} } @keyframes neuralPulse { 0%, 100% { opacity: 0.3; transform: scale(1)} 50% { opacity: 1; transform: scale(1.2)} } @keyframes typing { from { width: 0} to { width: 100%} } .cyber-glow { box-shadow: 0 0 20px #00d4ff40; transition: box-shadow 0.3s ease} .cyber-glow:hover { box-shadow: 0 0 30px #00d4ff80} .terminal-response { color: #00d4ff; margin: 10px 0; white-space: pre-line; font-family: 'Rajdhani', monospace} .terminal-error { color: #ff3366; margin: 10px 0; font-family: 'Rajdhani', monospace} .terminal-line { margin: 5px 0; font-family: 'Rajdhani', monospace} .terminal-prompt { color: #00ff88} .terminal-command { color: #ffffff} `; document.head.appendChild(style)} class SimpleTextScramble { constructor() { this.chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-=[]{}|;:,.<>?'; this.activeAnimations = new Map()} scramble(element, originalText, duration = 800) { if (this.activeAnimations.has(element)) { clearInterval(this.activeAnimations.get(element))} console.log(`🎯 Scrambling: "${originalText}"`); let frame = 0; const maxFrames = Math.floor(duration / 50); const animation = setInterval(() => { let scrambledText = ''; for (let i = 0; i < originalText.length; i++) { const progress = frame / maxFrames; const charProgress = (frame - i * 3) / maxFrames; if (charProgress > 0.7) { scrambledText += originalText[i]} else if (charProgress > 0) { scrambledText += this.chars[Math.floor(Math.random() * this.chars.length)]} else { scrambledText += originalText[i]} } element.textContent = scrambledText; frame++; if (frame >= maxFrames) { element.textContent = originalText; clearInterval(animation); this.activeAnimations.delete(element); console.log(`✅ Scramble complete: "${originalText}"`)} }, 50); this.activeAnimations.set(element, animation)} stop(element) { if (this.activeAnimations.has(element)) { clearInterval(this.activeAnimations.get(element)); this.activeAnimations.delete(element)} } } class SimpleNavScramble { constructor() { this.scrambler = new SimpleTextScramble(); this.originalTexts = new Map()} init() { console.log('🎯 Initializing navigation scramble effects...'); const navLinks = document.querySelectorAll('.nav-link'); console.log(`🔍 Found ${navLinks.length} navigation links`); navLinks.forEach((link, index) => { const textElement = link.querySelector('.nav-text'); if (textElement) { const originalText = textElement.textContent.trim(); this.originalTexts.set(textElement, originalText); console.log(`✅ Nav ${index + 1}: "${originalText}"`); link.addEventListener('mouseenter', () => { console.log(`🎯 Hover on: ${originalText}`); this.scrambler.scramble(textElement, originalText, 600)}); link.addEventListener('mouseleave', () => { this.scrambler.stop(textElement); textElement.textContent = originalText})} else { console.warn(`⚠️ Nav link ${index + 1} missing .nav-text`)} }); const heroTitles = document.querySelectorAll('.title-line'); console.log(`🔍 Found ${heroTitles.length} hero titles`); heroTitles.forEach((titleElement, index) => { const originalText = titleElement.textContent.trim(); this.originalTexts.set(titleElement, originalText); console.log(`✅ Hero ${index + 1}: "${originalText}"`); titleElement.addEventListener('mouseenter', () => { console.log(`🎯 Hover on hero: ${originalText}`); this.scrambler.scramble(titleElement, originalText, 1000)})}); console.log('✅ Navigation scramble effects ready!')} } class AdvancedCursorSystem { constructor() { this.cursor = null; this.cursorGlow = null; this.navLinks = document.querySelectorAll('.nav-link'); this.heroTitle = document.querySelectorAll('.title-line'); this.mouseX = 0; this.mouseY = 0; this.cursorX = 0; this.cursorY = 0; this.isHovering = false; this.magneticElements = []} init() { this.createCustomCursor(); this.initMouseTracking(); this.initMagneticNavigation(); this.initHeroTitleEffects(); this.initGlobalCursorEffects(); this.animate()} createCustomCursor() { this.cursor = document.createElement('div'); this.cursor.className = 'custom-cursor'; this.cursor.style.cssText = ` position: fixed; width: 20px; height: 20px; border: 2px solid #00d4ff; border-radius: 50%; pointer-events: none; z-index: 9999; mix-blend-mode: difference; transition: all 0.1s cubic-bezier(0.25, 0.46, 0.45, 0.94); transform: translate(-50%, -50%); `; this.cursorGlow = document.createElement('div'); this.cursorGlow.className = 'cursor-glow'; this.cursorGlow.style.cssText = ` position: fixed; width: 40px; height: 40px; background: radial-gradient(circle, rgba(0, 212, 255, 0.2) 0%, transparent 70%); border-radius: 50%; pointer-events: none; z-index: 9998; transform: translate(-50%, -50%); transition: all 0.3s ease; `; document.body.appendChild(this.cursor); document.body.appendChild(this.cursorGlow); document.body.style.cursor = 'none'} initMouseTracking() { document.addEventListener('mousemove', (e) => { this.mouseX = e.clientX; this.mouseY = e.clientY}); document.addEventListener('mousedown', () => { this.cursor.style.transform = 'translate(-50%, -50%) scale(0.8)'; this.cursor.style.borderColor = '#ff3366'}); document.addEventListener('mouseup', () => { this.cursor.style.transform = 'translate(-50%, -50%) scale(1)'; this.cursor.style.borderColor = '#00d4ff'})} initMagneticNavigation() { this.navLinks.forEach(link => { const magneticArea = 80; link.addEventListener('mouseenter', () => { this.cursor.style.width = '40px'; this.cursor.style.height = '40px'; this.cursor.style.borderColor = '#ff3366'; this.cursor.style.backgroundColor = 'rgba(255, 51, 102, 0.1)'; this.cursorGlow.style.background = 'radial-gradient(circle, rgba(255, 51, 102, 0.3) 0%, transparent 70%)'; this.isHovering = true; this.addMagneticEffect(link, magneticArea)}); link.addEventListener('mouseleave', () => { this.cursor.style.width = '20px'; this.cursor.style.height = '20px'; this.cursor.style.borderColor = '#00d4ff'; this.cursor.style.backgroundColor = 'transparent'; this.cursorGlow.style.background = 'radial-gradient(circle, rgba(0, 212, 255, 0.2) 0%, transparent 70%)'; this.isHovering = false; this.removeMagneticEffect(link)})})} addMagneticEffect(element, magneticArea) { const magneticHandler = (e) => { const rect = element.getBoundingClientRect(); const centerX = rect.left + rect.width / 2; const centerY = rect.top + rect.height / 2; const deltaX = e.clientX - centerX; const deltaY = e.clientY - centerY; const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY); if (distance < magneticArea) { const strength = (magneticArea - distance) / magneticArea; const moveX = deltaX * strength * 0.3; const moveY = deltaY * strength * 0.3; element.style.transform = `translate(${moveX}px, ${moveY}px) translateY(-2px)`; element.style.transition = 'transform 0.2s cubic-bezier(0.25, 0.46, 0.45, 0.94)'} }; element.magneticHandler = magneticHandler; document.addEventListener('mousemove', magneticHandler)} removeMagneticEffect(element) { if (element.magneticHandler) { document.removeEventListener('mousemove', element.magneticHandler); element.style.transform = 'translate(0px, 0px) translateY(-2px)'; element.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)'} } initHeroTitleEffects() { this.heroTitle.forEach(titleElement => { titleElement.addEventListener('mouseenter', () => { this.cursor.style.width = '60px'; this.cursor.style.height = '60px'; this.cursor.style.borderColor = '#00ffff'; this.cursor.style.backgroundColor = 'rgba(0, 255, 255, 0.1)'; this.cursorGlow.style.background = 'radial-gradient(circle, rgba(0, 255, 255, 0.4) 0%, transparent 70%)'; this.addFloatingEffect(titleElement)}); titleElement.addEventListener('mouseleave', () => { this.cursor.style.width = '20px'; this.cursor.style.height = '20px'; this.cursor.style.borderColor = '#00d4ff'; this.cursor.style.backgroundColor = 'transparent'; this.cursorGlow.style.background = 'radial-gradient(circle, rgba(0, 212, 255, 0.2) 0%, transparent 70%)'; this.removeFloatingEffect(titleElement)})})} addFloatingEffect(element) { const floatingHandler = (e) => { const rect = element.getBoundingClientRect(); const centerX = rect.left + rect.width / 2; const centerY = rect.top + rect.height / 2; const deltaX = (e.clientX - centerX) * 0.02; const deltaY = (e.clientY - centerY) * 0.02; element.style.transform = `translateX(${deltaX + 10}px) translateY(${deltaY}px)`; element.style.transition = 'transform 0.1s ease-out'}; element.floatingHandler = floatingHandler; document.addEventListener('mousemove', floatingHandler)} removeFloatingEffect(element) { if (element.floatingHandler) { document.removeEventListener('mousemove', element.floatingHandler); element.style.transform = 'translateX(10px) translateY(0px)'; element.style.transition = 'transform 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)'} } initGlobalCursorEffects() { const buttons = document.querySelectorAll('.cyber-btn, button'); buttons.forEach(button => { button.addEventListener('mouseenter', () => { this.cursor.style.width = '50px'; this.cursor.style.height = '50px'; this.cursor.style.borderColor = '#ff6b35'; this.cursor.style.backgroundColor = 'rgba(255, 107, 53, 0.1)'}); button.addEventListener('mouseleave', () => { this.cursor.style.width = '20px'; this.cursor.style.height = '20px'; this.cursor.style.borderColor = '#00d4ff'; this.cursor.style.backgroundColor = 'transparent'})})} animate() { this.cursorX += (this.mouseX - this.cursorX) * 0.1; this.cursorY += (this.mouseY - this.cursorY) * 0.1; if (this.cursor) { this.cursor.style.left = this.cursorX + 'px'; this.cursor.style.top = this.cursorY + 'px'} if (this.cursorGlow) { this.cursorGlow.style.left = this.cursorX + 'px'; this.cursorGlow.style.top = this.cursorY + 'px'} requestAnimationFrame(() => this.animate())} } function initializeCyberPortfolio() { console.log('🚀 Starting Cyber Portfolio initialization...'); window.scrollTo(0, 0); function startSystems() { try { console.log('🔧 Initializing systems...'); document.body.scrollTop = 0; document.documentElement.scrollTop = 0; setTimeout(() => { console.log('🎯 Starting text scramble system...'); const navScramble = new SimpleNavScramble(); navScramble.init(); console.log('✅ Text scramble system initialized!')}, 500)} catch (error) { console.error('❌ Error during initialization:', error); console.error('Error details:', error.stack)} } if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', startSystems); console.log('⏳ Waiting for DOM to load...')} else { console.log('✅ DOM already loaded, starting immediately'); startSystems()} } if (window.location.hash) { history.replaceState(null, null, window.location.pathname + window.location.search)} if ('scrollRestoration' in history) { history.scrollRestoration = 'manual'} window.addEventListener('beforeunload', () => { window.scrollTo(0, 0)}); document.addEventListener('DOMContentLoaded', () => { window.scrollTo(0, 0); document.body.scrollTop = 0; document.documentElement.scrollTop = 0}); initializeCyberPortfolio(); window.testScramble = function() { console.log('🧪 Testing text scramble...'); const scrambler = new SimpleTextScramble(); const testDiv = document.createElement('div'); testDiv.textContent = 'TESTING SCRAMBLE'; testDiv.style.cssText = ` position: fixed; top: 20px; left: 20px; color: #00d4ff; font-size: 24px; font-family: 'Orbitron', monospace; background: rgba(0, 0, 0, 0.9); padding: 15px; border: 2px solid #00d4ff; z-index: 10000; `; document.body.appendChild(testDiv); scrambler.scramble(testDiv, 'TESTING SCRAMBLE', 1000); setTimeout(() => { document.body.removeChild(testDiv); console.log('🧪 Test complete!')}, 2000)}; window.testNav = function() { console.log('🧪 Testing nav scramble...'); const navText = document.querySelector('.nav-text'); if (navText) { const scrambler = new SimpleTextScramble(); const original = navText.textContent; scrambler.scramble(navText, original, 800)} else { console.error('❌ No nav text found!')} }; window.testHero = function() { console.log('🧪 Testing hero scramble...'); const heroTitle = document.querySelector('.title-line'); if (heroTitle) { const scrambler = new SimpleTextScramble(); const original = heroTitle.textContent; scrambler.scramble(heroTitle, original, 1000)} else { console.error('❌ No hero title found!')} }; console.log(` %c╔═══════════════════════════════════════════════════════════════╗ ║ 🚀 CYBER PORTFOLIO SYSTEM 🚀 ║ ║ VERSION 2.0 ENHANCED ║ ╠═══════════════════════════════════════════════════════════════╣ ║ 🔮 Enhanced Particle Physics ║ ║ 🌌 Neural Network Visualization ║ ║ ⚡ Holographic Scan Lines ║ ║ 🎯 Interactive Cursor Effects ║ ║ 🔥 Advanced Cyber Animations ║ ║ 🎨 Floating Geometric Shapes ║ ║ 💫 Data Stream Visualizations ║ ║ 🌐 Matrix Rain Background ║ ║ ⚙️ Performance Optimizations ║ ║ 🎭 Enhanced Loading Sequence ║ ╚═══════════════════════════════════════════════════════════════╝ `, 'color: #00d4ff; font-family: monospace; font-size: 12px;'); console.log('%c🎯 System Status: FULLY OPERATIONAL ✓', 'color: #00ff88; font-weight: bold; font-size: 16px;'); console.log('%c💡 Tip: Try the terminal commands for interactive features!', 'color: #ff6b35; font-style: italic;'); class MobileNavigation { constructor() { this.navToggle = document.getElementById('nav-toggle'); this.navMenu = document.getElementById('nav-menu'); this.mobileOverlay = document.getElementById('mobile-overlay'); this.navLinks = document.querySelectorAll('.nav-link'); this.isMenuOpen = false; this.init()} init() { console.log('🔍 Checking mobile navigation elements...'); console.log('Nav toggle element:', this.navToggle); console.log('Nav menu element:', this.navMenu); console.log('Mobile overlay element:', this.mobileOverlay); if (!this.navToggle || !this.navMenu) { console.error('❌ Mobile navigation elements not found!'); console.log('Retrying in 500ms...'); setTimeout(() => { this.navToggle = document.getElementById('nav-toggle'); this.navMenu = document.getElementById('nav-menu'); this.mobileOverlay = document.getElementById('mobile-overlay'); this.navLinks = document.querySelectorAll('.nav-link'); if (this.navToggle && this.navMenu) { console.log('✅ Found elements on retry, initializing...'); this.initializeNavigation()} }, 500); return} this.initializeNavigation()} initializeNavigation() { console.log('🔧 Initializing Mobile Navigation System...'); this.bindEvents(); this.setupInitialState(); this.handleResize(); console.log('✅ Mobile Navigation System initialized!')} bindEvents() { this.navToggle.addEventListener('click', (e) => { e.preventDefault(); e.stopPropagation(); this.toggleMenu()}); if (this.mobileOverlay) { this.mobileOverlay.addEventListener('click', () => { this.closeMenu()})} this.navLinks.forEach(link => { link.addEventListener('click', () => { setTimeout(() => { this.closeMenu()}, 100)})}); document.addEventListener('click', (e) => { if (this.isMenuOpen && !this.navMenu.contains(e.target) && !this.navToggle.contains(e.target)) { this.closeMenu()} }); document.addEventListener('keydown', (e) => { if (e.key === 'Escape' && this.isMenuOpen) { this.closeMenu()} }); window.addEventListener('resize', () => { this.handleResize()}); this.handleBodyScroll()} setupInitialState() { this.navMenu.classList.remove('active'); this.navToggle.classList.remove('active'); if (this.mobileOverlay) { this.mobileOverlay.classList.remove('active')} document.body.classList.remove('menu-open'); this.isMenuOpen = false} toggleMenu() { if (this.isMenuOpen) { this.closeMenu()} else { this.openMenu()} } openMenu() { console.log('📱 Opening mobile menu...'); this.isMenuOpen = true; this.navMenu.classList.add('active'); this.navToggle.classList.add('active'); if (this.mobileOverlay) { this.mobileOverlay.classList.add('active')} document.body.classList.add('menu-open'); document.body.style.overflow = 'hidden'; this.animateMenuItems(); this.navMenu.setAttribute('aria-hidden', 'false'); this.navToggle.setAttribute('aria-expanded', 'true'); console.log('✅ Mobile menu opened!')} closeMenu() { console.log('📱 Closing mobile menu...'); this.isMenuOpen = false; this.navMenu.classList.remove('active'); this.navToggle.classList.remove('active'); if (this.mobileOverlay) { this.mobileOverlay.classList.remove('active')} document.body.classList.remove('menu-open'); document.body.style.overflow = ''; this.navMenu.setAttribute('aria-hidden', 'true'); this.navToggle.setAttribute('aria-expanded', 'false'); console.log('✅ Mobile menu closed!')} animateMenuItems() { const menuItems = this.navMenu.querySelectorAll('.nav-item'); menuItems.forEach((item, index) => { item.style.transitionDelay = `${(index + 1) * 0.05}s`})} handleResize() { if (window.innerWidth > 768 && this.isMenuOpen) { this.closeMenu()} } handleBodyScroll() { const style = document.createElement('style'); style.textContent = ` body.menu-open { overflow: hidden !important; position: fixed; width: 100%} `; document.head.appendChild(style)} forceClose() { if (this.isMenuOpen) { this.closeMenu()} } isOpen() { return this.isMenuOpen} } let mobileNav; function initMobileNavigation() { try { mobileNav = new MobileNavigation(); window.mobileNav = mobileNav; console.log('🚀 Mobile Navigation System ready!')} catch (error) { console.error('❌ Error initializing mobile navigation:', error)} } if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { setTimeout(initMobileNavigation, 100)})} else { setTimeout(initMobileNavigation, 100)} setTimeout(() => { if (!window.mobileNav) { console.log('🔄 Fallback mobile navigation initialization...'); initMobileNavigation()} }, 1000); class TouchGestureHandler { constructor() { this.startX = 0; this.startY = 0; this.minSwipeDistance = 100; this.maxVerticalDistance = 150; this.init()} init() { if (window.innerWidth <= 768) { this.bindTouchEvents(); console.log('📱 Touch gesture handler initialized')} } bindTouchEvents() { document.addEventListener('touchstart', (e) => { this.startX = e.touches[0].clientX; this.startY = e.touches[0].clientY}, { passive: true }); document.addEventListener('touchend', (e) => { if (!this.startX || !this.startY) return; const endX = e.changedTouches[0].clientX; const endY = e.changedTouches[0].clientY; const deltaX = endX - this.startX; const deltaY = Math.abs(endY - this.startY); if (deltaX < -this.minSwipeDistance && deltaY < this.maxVerticalDistance && mobileNav && mobileNav.isOpen()) { mobileNav.closeMenu()} this.startX = 0; this.startY = 0}, { passive: true })} } if (window.innerWidth <= 768) { new TouchGestureHandler()} class MobileOptimizations { constructor() { this.init()} init() { if (window.innerWidth <= 768) { this.optimizeForMobile()} } optimizeForMobile() { console.log('📱 Applying mobile optimizations...'); this.optimizeParticles(); this.optimizeAnimations(); this.optimizeImages(); console.log('✅ Mobile optimizations applied!')} optimizeParticles() { if (window.particleSystem) { window.particleSystem.maxParticles = Math.floor(window.particleSystem.maxParticles * 0.3); window.particleSystem.maxDataStreams = Math.floor(window.particleSystem.maxDataStreams * 0.3); window.particleSystem.maxFloatingParticles = Math.floor(window.particleSystem.maxFloatingParticles * 0.3)} } optimizeAnimations() { const style = document.createElement('style'); style.textContent = ` @media (max-width: 768px) { * { animation-duration: 0.3s !important; transition-duration: 0.3s !important} .particle { animation-duration: 5s !important} .floating-shape { display: none !important} } `; document.head.appendChild(style)} optimizeImages() { const images = document.querySelectorAll('img'); images.forEach(img => { img.loading = 'lazy'})} } new MobileOptimizations(); window.testMobileNav = function() { console.log('🧪 Testing mobile navigation...'); if (mobileNav) { console.log('Menu open state:', mobileNav.isOpen()); if (mobileNav.isOpen()) { mobileNav.forceClose(); console.log('✅ Menu closed via test function')} else { mobileNav.openMenu(); console.log('✅ Menu opened via test function')} } else { console.error('❌ Mobile navigation not initialized')} }; window.debugMobileLayout = function() { console.log('🔍 Mobile Layout Debug Info:'); console.log('Window width:', window.innerWidth); console.log('Window height:', window.innerHeight); console.log('Screen width:', screen.width); console.log('Screen height:', screen.height); console.log('Device pixel ratio:', window.devicePixelRatio); console.log('Orientation:', window.innerWidth > window.innerHeight ? 'landscape' : 'portrait'); const nav = document.querySelector('.cyber-nav'); const hero = document.querySelector('.hero-section'); if (nav) { const navRect = nav.getBoundingClientRect(); console.log('Navigation height:', navRect.height)} if (hero) { const heroRect = hero.getBoundingClientRect(); console.log('Hero section height:', heroRect.height)} console.log('Touch support:', 'ontouchstart' in window); console.log('Mobile nav initialized:', !!mobileNav)}; class ScrollToTop { constructor() { this.scrollButton = document.getElementById('scrollToTop'); this.scrollThreshold = 200; this.isVisible = false; this.isScrolling = false; this.init()} init() { if (!this.scrollButton) { console.warn('Scroll to top button not found'); return} this.scrollButton.addEventListener('click', (e) => { e.preventDefault(); this.scrollToTop()}); let scrollTimeout; window.addEventListener('scroll', () => { if (scrollTimeout) { clearTimeout(scrollTimeout)} scrollTimeout = setTimeout(() => this.handleScroll(), 10)}); document.addEventListener('keydown', (e) => { if (e.key === 'Home' && e.ctrlKey) { e.preventDefault(); this.scrollToTop()} }); this.handleScroll(); console.log('✅ Enhanced scroll to top system initialized'); console.log('💡 Tip: Use Ctrl+Home to scroll to top from keyboard')} handleScroll() { const scrollTop = window.pageYOffset || document.documentElement.scrollTop; if (scrollTop > this.scrollThreshold && !this.isVisible) { this.showButton()} else if (scrollTop <= this.scrollThreshold && this.isVisible) { this.hideButton()} } showButton() { this.scrollButton.classList.add('visible'); this.isVisible = true} hideButton() { this.scrollButton.classList.remove('visible'); this.isVisible = false} scrollToTop() { if (this.isScrolling) return; this.isScrolling = true; this.scrollButton.style.transform = 'translateY(-3px) scale(1.05)'; const heroSection = document.getElementById('hero') || document.querySelector('.hero-section'); const targetPosition = heroSection ? heroSection.offsetTop : 0; window.scrollTo({ top: targetPosition, behavior: 'smooth' }); setTimeout(() => { this.scrollButton.style.transform = ''; this.isScrolling = false}, 800); this.addScrollEffect(); setTimeout(() => { if (window.pageYOffset > 50) { window.scrollTo({ top: 0, behavior: 'smooth' })} }, 1000); console.log('🚀 Scrolling to home page...')} addScrollEffect() { const glowEffect = document.createElement('div'); glowEffect.style.cssText = ` position: fixed; bottom: 30px; right: 30px; width: 80px; height: 80px; border-radius: 50%; background: radial-gradient(circle, rgba(0, 212, 255, 0.3) 0%, transparent 70%); pointer-events: none; z-index: 999; animation: scrollGlowEffect 0.6s ease-out forwards; `; if (!document.getElementById('scrollGlowAnimation')) { const style = document.createElement('style'); style.id = 'scrollGlowAnimation'; style.textContent = ` @keyframes scrollGlowEffect { 0% { transform: scale(0.5); opacity: 1} 100% { transform: scale(2); opacity: 0} } `; document.head.appendChild(style)} document.body.appendChild(glowEffect); setTimeout(() => { if (glowEffect.parentNode) { glowEffect.remove()} }, 600)} } class FooterInteractions { constructor() { this.footerLinks = document.querySelectorAll('.footer-link'); this.socialLinks = document.querySelectorAll('.footer-social-link'); this.scanLine = document.querySelector('.footer-scan-line'); this.init()} init() { this.setupFooterLinks(); this.setupSocialLinks(); this.setupFooterHoverEffects(); console.log('✅ Footer interactions initialized')} setupFooterLinks() { this.footerLinks.forEach(link => { link.addEventListener('click', (e) => { e.preventDefault(); const target = link.getAttribute('href'); if (target && target.startsWith('#')) { const targetElement = document.querySelector(target); if (targetElement) { this.addClickEffect(link); targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' })} } }); link.addEventListener('mouseenter', () => { this.addHoverEffect(link)})})} setupSocialLinks() { this.socialLinks.forEach(link => { link.addEventListener('mouseenter', () => { this.addSocialHoverEffect(link)}); link.addEventListener('click', () => { this.addClickEffect(link)})})} setupFooterHoverEffects() { const footer = document.querySelector('.cyber-footer'); if (footer) { footer.addEventListener('mouseenter', () => { if (this.scanLine) { this.scanLine.style.animationDuration = '2s'} }); footer.addEventListener('mouseleave', () => { if (this.scanLine) { this.scanLine.style.animationDuration = '4s'} })} } addClickEffect(element) { element.style.transform = 'translateY(-2px) scale(0.95)'; setTimeout(() => { element.style.transform = ''}, 150)} addHoverEffect(element) { const glow = document.createElement('div'); glow.style.cssText = ` position: absolute; top: 50%; left: 50%; width: 100%; height: 100%; background: rgba(0, 212, 255, 0.2); border-radius: inherit; transform: translate(-50%, -50%); pointer-events: none; animation: footerLinkGlow 0.3s ease-out forwards; `; element.style.position = 'relative'; element.appendChild(glow); setTimeout(() => { if (glow.parentNode) { glow.remove()} }, 300)} addSocialHoverEffect(element) { const ripple = document.createElement('div'); ripple.style.cssText = ` position: absolute; top: 50%; left: 50%; width: 10px; height: 10px; background: rgba(255, 51, 102, 0.6); border-radius: 50%; transform: translate(-50%, -50%); pointer-events: none; animation: socialRipple 0.6s ease-out forwards; `; element.style.position = 'relative'; element.appendChild(ripple); setTimeout(() => { if (ripple.parentNode) { ripple.remove()} }, 600)} } const footerAnimationStyles = document.createElement('style'); footerAnimationStyles.textContent = ` @keyframes footerLinkGlow { 0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8)} 50% { opacity: 1; transform: translate(-50%, -50%) scale(1.1)} 100% { opacity: 0; transform: translate(-50%, -50%) scale(1.3)} } @keyframes socialRipple { 0% { width: 10px; height: 10px; opacity: 1} 100% { width: 50px; height: 50px; opacity: 0} } `; document.head.appendChild(footerAnimationStyles); const scrollToTopSystem = new ScrollToTop(); const footerInteractions = new FooterInteractions(); document.addEventListener('DOMContentLoaded', function() { console.log('🚀 Initializing Simple Mobile Navigation...'); const navToggle = document.getElementById('nav-toggle'); const navMenu = document.getElementById('nav-menu'); const mobileOverlay = document.getElementById('mobile-overlay'); const navLinks = document.querySelectorAll('.nav-link'); const body = document.body; let isMenuOpen = false; if (!navToggle || !navMenu || !mobileOverlay) { console.error('❌ Mobile navigation elements not found!'); return} console.log('✅ All mobile navigation elements found'); function toggleMenu() { console.log('🔄 Toggling menu, current state:', isMenuOpen); if (isMenuOpen) { closeMenu()} else { openMenu()} } function openMenu() { console.log('📱 Opening mobile menu...'); navToggle.classList.add('active'); navMenu.classList.add('active'); mobileOverlay.classList.add('active'); body.classList.add('menu-open'); isMenuOpen = true; navToggle.setAttribute('aria-expanded', 'true'); console.log('✅ Mobile menu opened')} function closeMenu() { console.log('📱 Closing mobile menu...'); navToggle.classList.remove('active'); navMenu.classList.remove('active'); mobileOverlay.classList.remove('active'); body.classList.remove('menu-open'); isMenuOpen = false; navToggle.setAttribute('aria-expanded', 'false'); console.log('✅ Mobile menu closed')} navToggle.addEventListener('click', function(e) { console.log('🖱️ Hamburger clicked!'); e.preventDefault(); e.stopPropagation(); toggleMenu()}); mobileOverlay.addEventListener('click', function() { console.log('🖱️ Overlay clicked - closing menu'); closeMenu()}); navLinks.forEach(function(link) { link.addEventListener('click', function() { console.log('🖱️ Nav link clicked - closing menu'); setTimeout(closeMenu, 100)})}); document.addEventListener('keydown', function(e) { if (e.key === 'Escape' && isMenuOpen) { console.log('⌨️ ESC pressed - closing menu'); closeMenu()} }); window.addEventListener('resize', function() { if (window.innerWidth > 768 && isMenuOpen) { console.log('📏 Resized to desktop - closing menu'); closeMenu()} }); navMenu.addEventListener('click', function(e) { e.stopPropagation()}); window.mobileNavDebug = { toggle: toggleMenu, open: openMenu, close: closeMenu, isOpen: () => isMenuOpen, elements: { navToggle, navMenu, mobileOverlay } }; console.log('✅ Simple Mobile Navigation initialized successfully!'); console.log('💡 Use window.mobileNavDebug for testing')}); (function() { 'use strict'; console.log('🚀 Loading Navbar Animation System...'); class FreshNavbarScramble { constructor() { this.chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?/\\~`'; this.activeAnimations = new Map(); this.isInitialized = false; this.waitForDOM()} waitForDOM() { if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => this.initialize())} else { this.initialize()} } initialize() { if (this.isInitialized) { console.log('⚠️ Navbar animation already initialized'); return} console.log('🔧 Initializing Fresh Navbar Scramble...'); const navTextElements = document.querySelectorAll('.nav-text'); const logoTextElement = document.querySelector('.logo-text'); console.log(`📍 Found ${navTextElements.length} nav text elements`); console.log(`📍 Found logo text element:`, logoTextElement ? 'Yes' : 'No'); if (navTextElements.length === 0 && !logoTextElement) { console.warn('❌ No text elements found! Retrying in 1 second...'); setTimeout(() => this.initialize(), 1000); return} navTextElements.forEach((textElement, index) => { this.setupElement(textElement, index)}); if (logoTextElement) { this.setupLogoElement(logoTextElement)} this.isInitialized = true; console.log('✅ Fresh Navbar Scramble initialized successfully!')} setupElement(textElement, index) { const originalText = textElement.textContent.trim(); const navLink = textElement.closest('.nav-link'); if (!navLink) { console.warn(`⚠️ No parent .nav-link found for element ${index}`); return} console.log(`📝 Setting up element ${index}: "${originalText}"`); textElement.setAttribute('data-original-text', originalText); const newNavLink = navLink.cloneNode(true); navLink.parentNode.replaceChild(newNavLink, navLink); const newTextElement = newNavLink.querySelector('.nav-text'); newNavLink.addEventListener('mouseenter', () => { console.log(`🎬 Mouse enter: ${originalText}`); this.startScramble(newTextElement, originalText)}); newNavLink.addEventListener('mouseleave', () => { console.log(`🛑 Mouse leave: ${originalText}`); this.stopScramble(newTextElement, originalText)}); console.log(`✅ Element ${index} setup complete`)} setupLogoElement(logoElement) { const originalText = logoElement.textContent.trim(); const logoContainer = logoElement.closest('.nav-logo'); console.log(`📝 Setting up logo element: "${originalText}"`); logoElement.setAttribute('data-original-text', originalText); const newLogoContainer = logoContainer.cloneNode(true); logoContainer.parentNode.replaceChild(newLogoContainer, logoContainer); const newLogoElement = newLogoContainer.querySelector('.logo-text'); newLogoContainer.addEventListener('mouseenter', () => { console.log(`🎬 Logo mouse enter: ${originalText}`); this.startScramble(newLogoElement, originalText)}); newLogoContainer.addEventListener('mouseleave', () => { console.log(`🛑 Logo mouse leave: ${originalText}`); this.stopScramble(newLogoElement, originalText)}); console.log(`✅ Logo element setup complete`)} startScramble(element, finalText) { const elementId = this.getElementId(element); this.stopScramble(element, finalText); console.log(`🔄 Starting scramble for: "${finalText}"`); element.style.whiteSpace = 'nowrap'; element.style.display = 'inline-block'; element.style.minWidth = element.offsetWidth + 'px'; let iteration = 0; const maxIterations = finalText.length; const animationId = setInterval(() => { const scrambledText = finalText .split('') .map((char, index) => { if (index < iteration) { return finalText[index]} return this.chars[Math.floor(Math.random() * this.chars.length)]}) .join(''); element.textContent = scrambledText; if (iteration >= maxIterations) { clearInterval(animationId); element.textContent = finalText; this.activeAnimations.delete(elementId); console.log(`✅ Scramble complete for: "${finalText}"`)} iteration += 0.8}, 30); this.activeAnimations.set(elementId, animationId)} stopScramble(element, originalText) { const elementId = this.getElementId(element); if (this.activeAnimations.has(elementId)) { clearInterval(this.activeAnimations.get(elementId)); this.activeAnimations.delete(elementId); console.log(`🛑 Stopped scramble for: "${originalText}"`)} element.textContent = originalText} getElementId(element) { if (!element.dataset.scrambleId) { element.dataset.scrambleId = 'scramble_' + Math.random().toString(36).substr(2, 9)} return element.dataset.scrambleId} test() { console.log('🧪 Testing navbar scramble animation...'); const navTexts = document.querySelectorAll('.nav-text'); const logoText = document.querySelector('.logo-text'); navTexts.forEach((text, index) => { const originalText = text.getAttribute('data-original-text') || text.textContent; console.log(`Testing nav element ${index}: "${originalText}"`); setTimeout(() => { this.startScramble(text, originalText)}, index * 500)}); if (logoText) { const originalText = logoText.getAttribute('data-original-text') || logoText.textContent; console.log(`Testing logo element: "${originalText}"`); setTimeout(() => { this.startScramble(logoText, originalText)}, navTexts.length * 500)} } } window.freshNavbarScramble = new FreshNavbarScramble(); window.testFreshNavScramble = () => { if (window.freshNavbarScramble) { window.freshNavbarScramble.test()} else { console.error('❌ Fresh navbar scramble not initialized')} }; console.log('✅ Fresh Navbar Animation System loaded!')})(); class WorkingTerminal { constructor() { this.input = null; this.output = null; this.history = []; this.historyIndex = -1; this.initialized = false} init() { console.log('🚀 Initializing Working Terminal...'); this.findElements()} findElements() { this.input = document.getElementById('terminal-input'); this.output = document.getElementById('terminal-output'); if (!this.input || !this.output) { console.warn('❌ Terminal elements not found, retrying in 1 second...'); setTimeout(() => this.findElements(), 1000); return} console.log('✅ Terminal elements found!'); this.setupTerminal()} setupTerminal() { if (this.initialized) return; console.log('🔧 Setting up terminal...'); this.output.innerHTML = ''; this.input.addEventListener('keydown', (e) => { console.log('Key pressed:', e.key); if (e.key === 'Enter') { e.preventDefault(); this.executeCommand()} else if (e.key === 'ArrowUp') { e.preventDefault(); this.historyUp()} else if (e.key === 'ArrowDown') { e.preventDefault(); this.historyDown()} }); const terminalBody = document.getElementById('terminal-body'); if (terminalBody) { terminalBody.addEventListener('click', () => { this.input.focus()})} this.showWelcome(); this.initialized = true; console.log('✅ Terminal setup complete!')} executeCommand() { const command = this.input.value.trim(); console.log('Executing command:', command); if (!command) return; this.history.push(command); this.historyIndex = this.history.length; this.addOutput(`<div style="color: #00ff88;">sudip@portfolio:~$ <span style="color: #ffffff;">${command}</span></div>`); this.runCommand(command.toLowerCase()); this.input.value = ''; this.scrollToBottom()} runCommand(cmd) { const parts = cmd.split(' '); const command = parts[0]; const args = parts.slice(1); switch(command) { case 'help': this.showHelp(); break; case 'about': this.showAbout(); break; case 'skills': this.showSkills(); break; case 'projects': this.showProjects(); break; case 'contact': this.showContact(); break; case 'education': this.showEducation(); break; case 'certificates': this.showCertificates(); break; case 'clear': this.clear(); break; case 'whoami': this.whoami(); break; case 'date': this.showDate(); break; case 'pwd': this.pwd(); break; case 'ls': this.ls(); break; case 'cat': this.cat(args); break; case 'echo': this.echo(args); break; case 'matrix': this.matrix(); break; case 'hack': this.hack(); break; case 'glitch': this.glitch(); break; case 'status': this.status(); break; case 'sudo': this.sudo(args); break; case 'test': this.testTerminal(); break; default: this.addOutput(`<div style="color: #ff3366;">Command not found: ${command}. Type 'help' for available commands.</div>`)} } addOutput(html) { this.output.innerHTML += html + '<br>'; this.scrollToBottom()} scrollToBottom() { const terminalBody = document.getElementById('terminal-body'); if (terminalBody) { terminalBody.scrollTop = terminalBody.scrollHeight} } historyUp() { if (this.history.length === 0) return; if (this.historyIndex > 0) { this.historyIndex--; this.input.value = this.history[this.historyIndex]} } historyDown() { if (this.historyIndex < this.history.length - 1) { this.historyIndex++; this.input.value = this.history[this.historyIndex]} else { this.historyIndex = this.history.length; this.input.value = ''} } showWelcome() { this.addOutput(`<div style="color: #00d4ff;"> ╔═══════════════════════════════════════════════════════════════╗ ║ 🚀 TERMINAL SYSTEM ONLINE 🚀 ║ ║ ║ ║ Welcome to Sudip's Interactive Portfolio Terminal! ║ ║ Type 'help' to see all available commands. ║ ║ Press Enter to execute commands. ║ ╚═══════════════════════════════════════════════════════════════╝ </div>`)} showHelp() { this.addOutput(`<div style="color: #00d4ff;"> Available Commands: ───────────────────────────────────────────────────────────── help Show this help message about Display personal information skills Show technical skills projects List all projects contact Get contact information education Show educational background certificates List certifications clear Clear terminal screen whoami Display current user date Show current date/time pwd Print working directory ls List directory contents cat [file] Display file contents echo [text] Display text matrix Activate matrix mode hack Initiate hacking sequence glitch Trigger glitch effect status Show system status sudo [cmd] Execute with admin privileges test Test terminal functionality ───────────────────────────────────────────────────────────── Use ↑/↓ arrow keys to navigate command history </div>`)} showAbout() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ SUDIP MISHRA ║ ║ Computer Science Engineer ║ ╚══════════════════════════════════════════════════════════════╝ Name: Sudip Mishra Role: Computer Science Engineering Student Graduation: 2024 Institution: Government Engineering College Location: India Specialization: AI/ML, Cybersecurity, Data Structures Interests: Machine Learning, Software Development, Cybersecurity Mission: To contribute to cutting-edge technology projects while continuously learning and growing in the field of computer science. Status: Available for opportunities and collaborations </div>`)} showSkills() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ TECHNICAL SKILLS ║ ╚══════════════════════════════════════════════════════════════╝ PROGRAMMING LANGUAGES: • Python ████████████████████████░░░░ 75% • C Programming ████████████████████░░░░░░░░ 65% • JavaScript ██████████████████░░░░░░░░░░ 60% • HTML/CSS ████████████████████████████ 85% FRAMEWORKS & LIBRARIES: • Django ████████████████████░░░░░░░░ 65% • Flask ██████████████████░░░░░░░░░░ 60% • TensorFlow ████████████████░░░░░░░░░░░░ 50% • Pandas ████████████████████░░░░░░░░ 65% DATABASES: • MySQL ████████████████████░░░░░░░░ 65% • SQLite ██████████████████████░░░░░░ 70% TOOLS & TECHNOLOGIES: • Git/GitHub ████████████████████████░░░░ 75% • Linux ██████████████████░░░░░░░░░░ 60% • VS Code ████████████████████████████ 85% • Wireshark ████████████████░░░░░░░░░░░░ 50% </div>`)} showProjects() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ PROJECT PORTFOLIO ║ ╚══════════════════════════════════════════════════════════════╝ [01] MACHINE LEARNING CLASSIFIER • Developed ML model for data classification • Technologies: Python, Scikit-learn, Pandas • Status: Completed [02] CYBERSECURITY TOOLKIT • Network security analysis and monitoring tools • Technologies: Python, Wireshark, Scapy • Status: Active Development [03] STUDENT MANAGEMENT PORTAL • Comprehensive student information system • Technologies: Python, Django, MySQL, Bootstrap • Status: Completed [04] DATA ANALYSIS DASHBOARD • Interactive data visualization platform • Technologies: Python, Pandas, Matplotlib, Streamlit • Status: Completed [05] NETWORK SECURITY ANALYZER • Network traffic analysis for threat detection • Technologies: Python, Wireshark, Scapy, TensorFlow • Status: Completed [06] E-COMMERCE WEB APPLICATION • Full-stack e-commerce platform • Technologies: HTML/CSS, JavaScript, PHP, MySQL • Status: Completed [07] INTERACTIVE CYBER PORTFOLIO • This portfolio website with advanced animations • Technologies: HTML/CSS, JavaScript, Cyber Effects • Status: Active Development </div>`)} showContact() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ CONTACT PROTOCOLS ║ ╚══════════════════════════════════════════════════════════════╝ EMAIL_PROTOCOL: sudip.mishra@example.com VOICE_CHANNEL: +91 XXXXX XXXXX COORDINATES: India EDUCATION: B.Tech CSE (2024) SOCIAL_NETWORKS: → GitHub: https: → LinkedIn: https: → Portfolio: This interactive system AVAILABILITY: ████████████████████████████ 100% RESPONSE_TIME: < 24 hours COLLABORATION: OPEN STATUS: 🟢 READY FOR NEW OPPORTUNITIES </div>`)} showEducation() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ EDUCATIONAL BACKGROUND ║ ╚══════════════════════════════════════════════════════════════╝ DEGREE: Bachelor of Technology (B.Tech) SPECIALIZATION: Computer Science & Engineering INSTITUTION: Government Engineering College GRADUATION_YEAR: 2024 LOCATION: India ACADEMIC_FOCUS: • Machine Learning & Artificial Intelligence • Cybersecurity & Network Security • Data Structures & Algorithms • Software Development & Engineering • Database Management Systems RELEVANT_COURSEWORK: • Advanced Programming in Python & C • Machine Learning Fundamentals • Network Security & Cryptography • Web Development Technologies • Database Design & Implementation ACADEMIC_STATUS: Completed with Strong Foundation </div>`)} showCertificates() { this.addOutput(`<div style="color: #00d4ff;"> ╔══════════════════════════════════════════════════════════════╗ ║ CERTIFICATIONS ║ ╚══════════════════════════════════════════════════════════════╝ [CERT_01] PYTHON PROGRAMMING FUNDAMENTALS Issuer: Python Institute Status: ✅ VERIFIED Skills: Advanced Python, OOP, Data Structures [CERT_02] MACHINE LEARNING BASICS Issuer: Coursera / Stanford University Status: ✅ VERIFIED Skills: ML Algorithms, Data Analysis, Scikit-learn [CERT_03] CYBERSECURITY ESSENTIALS Issuer: Cisco Networking Academy Status: ✅ VERIFIED Skills: Network Security, Threat Analysis [CERT_04] WEB DEVELOPMENT FUNDAMENTALS Issuer: FreeCodeCamp Status: ✅ VERIFIED Skills: HTML/CSS, JavaScript, Responsive Design [CERT_05] DATABASE MANAGEMENT Issuer: Oracle Academy Status: ✅ VERIFIED Skills: SQL, Database Design, MySQL TOTAL_CERTIFICATIONS: 5 VERIFICATION_STATUS: All certificates available for review </div>`)} clear() { this.output.innerHTML = ''; this.addOutput('<div style="color: #00ff88;">Terminal cleared. Type "help" for available commands.</div>')} whoami() { this.addOutput('<div style="color: #00d4ff;">sudip_mishra<br>Computer Science Engineer | AI/ML Enthusiast | Cybersecurity Analyst</div>')} showDate() { const now = new Date(); this.addOutput(`<div style="color: #00d4ff;">Current Date & Time: ${now.toLocaleString()}</div>`)} pwd() { this.addOutput('<div style="color: #00d4ff;">/home/sudip_mishra/portfolio</div>')} ls() { this.addOutput(`<div style="color: #00d4ff;"> total 8 drwxr-xr-x 2 sudip_mishra staff 64B portfolio/ -rw-r--r-- 1 sudip_mishra staff 1.2K about.txt -rw-r--r-- 1 sudip_mishra staff 2.1K skills.txt -rw-r--r-- 1 sudip_mishra staff 3.4K projects.txt -rw-r--r-- 1 sudip_mishra staff 1.8K contact.txt -rw-r--r-- 1 sudip_mishra staff 2.7K certificates.txt -rwxr-xr-x 1 sudip_mishra staff 4.2K portfolio.exe* </div>`)} cat(args) { if (args.length === 0) { this.addOutput('<div style="color: #ff3366;">Usage: cat [filename]</div>'); return} const file = args[0]; switch(file) { case 'about.txt': this.showAbout(); break; case 'skills.txt': this.showSkills(); break; case 'projects.txt': this.showProjects(); break; case 'contact.txt': this.showContact(); break; case 'certificates.txt': this.showCertificates(); break; default: this.addOutput(`<div style="color: #ff3366;">cat: ${file}: No such file or directory</div>`)} } echo(args) { const text = args.join(' '); this.addOutput(`<div style="color: #00d4ff;">${text || ''}</div>`)} matrix() { this.addOutput(`<div style="color: #00ff88;"> INITIALIZING MATRIX MODE... █▓▒░ LOADING NEURAL NETWORK ░▒▓█ ▓▒░ CONNECTING TO THE MATRIX ░▒▓ ▒░ REALITY.EXE SUSPENDED ░▒ ░ ENTERING DIGITAL REALM ░ <span style="color: #00d4ff;">Wake up, Neo... The Matrix has you...</span> MATRIX MODE ACTIVATED ✓ </div>`)} hack() { this.addOutput(`<div style="color: #ff3366;"> INITIATING HACKING SEQUENCE... [01] Scanning network topology... ✓ [02] Bypassing firewall protocols... ✓ [03] Injecting payload... ✓ [04] Escalating privileges... ✓ [05] Accessing mainframe... ✓ <span style="color: #00ff88;">SYSTEM COMPROMISED SUCCESSFULLY!</span> Just kidding! This is a harmless animation 😄 No actual hacking performed. This portfolio is secure! <span style="color: #00d4ff;">- Sudip Mishra, Ethical Security Enthusiast</span> </div>`)} glitch() { this.addOutput(`<div style="color: #ff3366;"> G̴L̸I̴T̸C̷H̸ ̴E̷F̸F̸E̸C̴T̷ ̸A̷C̴T̸I̷V̴A̸T̴E̷D̸ System experiencing temporal anomalies... Reality.exe has stopped working... Attempting to restore matrix integrity... <span style="color: #00d4ff;">✓ Glitch effect completed successfully!</span> </div>`)} status() { const uptime = Math.floor(Date.now() / 1000 / 60); this.addOutput(`<div style="color: #00d4ff;"> ╔═══════════════════════════════════════════════════════════════╗ ║ SYSTEM STATUS ║ ╚═══════════════════════════════════════════════════════════════╝ HOSTNAME: sudip-portfolio KERNEL: CyberOS v2.0.24 UPTIME: ${uptime} minutes PROCESSES: ${Math.floor(Math.random() * 150) + 100} running MEMORY: ${Math.floor(Math.random() * 4096) + 2048} MB used NETWORK: ONLINE - All systems operational SECURITY: Level 5 - Maximum encryption enabled ACTIVE MODULES: ✓ Particle Physics Engine ✓ Neural Network Visualizer ✓ Holographic Display System ✓ Interactive Terminal ✓ Matrix Rain Generator STATUS: 🟢 ALL SYSTEMS OPERATIONAL </div>`)} sudo(args) { this.addOutput(`<div style="color: #ff3366;"> [sudo] password for sudip_mishra: ●●●●●●●● ADMIN ACCESS GRANTED <span style="color: #00ff88;">Executing with elevated privileges...</span> Command executed successfully with admin rights! (This is just a simulation - no real sudo access provided) </div>`)} testTerminal() { this.addOutput(`<div style="color: #00ff88;"> 🧪 TERMINAL TEST RESULTS: ──────────────────────────── ✅ Input Element: Working ✅ Output Element: Working ✅ Enter Key: Working ✅ Command Execution: Working ✅ History Navigation: Working ✅ Auto-scroll: Working Terminal is fully functional! 🚀 </div>`)} } const workingTerminal = new WorkingTerminal(); if (document.readyState === 'loading') { document.addEventListener('DOMContentLoaded', () => { setTimeout(() => workingTerminal.init(), 1000)})} else { setTimeout(() => workingTerminal.init(), 1000)} window.testNewTerminal = function() { console.log('Testing new terminal...'); workingTerminal.init(); return 'New terminal initialization attempted'}; window.newTerminal = workingTerminal; console.log('🚀 New Working Terminal System Loaded!'); class MobileHamburgerMenu { constructor(options = {}) { this.options = { hamburgerSelector: '#mobileHamburger', menuPanelSelector: '#mobileMenuPanel', menuOverlaySelector: '#mobileMenuOverlay', menuLinksSelector: '.mobile-menu-link', bodyClass: 'mobile-menu-open', activeClass: 'active', closeOnLinkClick: true, closeOnEscape: true, closeOnResize: true, enableFocusTrap: true, breakpoint: 767, ...options }; this.hamburger = document.querySelector(this.options.hamburgerSelector); this.menuPanel = document.querySelector(this.options.menuPanelSelector); this.menuOverlay = document.querySelector(this.options.menuOverlaySelector); this.menuLinks = document.querySelectorAll(this.options.menuLinksSelector); this.body = document.body; this.isOpen = false; this.focusableElements = []; this.firstFocusableElement = null; this.lastFocusableElement = null; this.init()} init() { if (!this.hamburger || !this.menuPanel || !this.menuOverlay) { console.error('MobileHamburgerMenu: Required elements not found. Please check your HTML structure.'); return} this.bindEvents(); this.setupAccessibility(); console.log('✅ Mobile Hamburger Menu initialized')} bindEvents() { this.hamburger.addEventListener('click', (e) => { e.preventDefault(); this.toggle()}); this.menuOverlay.addEventListener('click', () => { this.close()}); if (this.options.closeOnLinkClick) { this.menuLinks.forEach((link, index) => { link.addEventListener('click', (e) => { console.log(`🎯 Menu link ${index + 1} clicked:`, link.textContent.trim()); console.log('🔗 Link href:', link.getAttribute('href')); const href = link.getAttribute('href'); if (href && href.startsWith('#')) { const target = document.querySelector(href); if (target) { console.log('✅ Target section found:', href); setTimeout(() => { target.scrollIntoView({ behavior: 'smooth', block: 'start' }); this.close()}, 100)} else { console.warn('⚠️ Target section not found:', href); this.close()} } else { setTimeout(() => this.close(), 150)} })})} if (this.options.closeOnEscape) { document.addEventListener('keydown', (e) => this.handleKeydown(e))} if (this.options.closeOnResize) { window.addEventListener('resize', () => { if (window.innerWidth > this.options.breakpoint && this.isOpen) { this.close()} })} } setupAccessibility() { this.hamburger.setAttribute('aria-expanded', 'false'); if (!this.hamburger.getAttribute('aria-label')) { this.hamburger.setAttribute('aria-label', 'Toggle mobile menu')} if (!this.menuPanel.getAttribute('aria-label')) { this.menuPanel.setAttribute('aria-label', 'Mobile navigation')} } toggle() { if (this.isOpen) { this.close()} else { this.open()} } open() { if (this.isOpen) return; this.isOpen = true; this.hamburger.classList.add(this.options.activeClass); this.menuPanel.classList.add(this.options.activeClass); this.menuOverlay.classList.add(this.options.activeClass); this.body.classList.add(this.options.bodyClass); this.hamburger.setAttribute('aria-expanded', 'true'); if (this.options.enableFocusTrap) { setTimeout(() => { this.updateFocusableElements(); if (this.firstFocusableElement) { this.firstFocusableElement.focus()} }, 100)} this.dispatchEvent('menuOpen'); console.log('📱 Mobile menu opened')} close() { if (!this.isOpen) return; this.isOpen = false; this.hamburger.classList.remove(this.options.activeClass); this.menuPanel.classList.remove(this.options.activeClass); this.menuOverlay.classList.remove(this.options.activeClass); this.body.classList.remove(this.options.bodyClass); this.hamburger.setAttribute('aria-expanded', 'false'); this.hamburger.focus(); this.dispatchEvent('menuClose'); console.log('📱 Mobile menu closed')} updateFocusableElements() { if (this.isOpen) { this.focusableElements = this.menuPanel.querySelectorAll( 'a, button, [tabindex]:not([tabindex="-1"])' ); this.firstFocusableElement = this.focusableElements[0]; this.lastFocusableElement = this.focusableElements[this.focusableElements.length - 1]} } handleKeydown(e) { if (!this.isOpen) return; if (e.key === 'Escape') { e.preventDefault(); this.close(); return} if (this.options.enableFocusTrap && e.key === 'Tab') { if (this.focusableElements.length === 0) return; if (e.shiftKey) { if (document.activeElement === this.firstFocusableElement) { e.preventDefault(); this.lastFocusableElement.focus()} } else { if (document.activeElement === this.lastFocusableElement) { e.preventDefault(); this.firstFocusableElement.focus()} } } } dispatchEvent(eventName) { const event = new CustomEvent(eventName, { detail: { menu: this } }); document.dispatchEvent(event)} isMenuOpen() { return this.isOpen} forceClose() { if (this.isOpen) { this.close()} } forceOpen() { if (!this.isOpen) { this.open()} } destroy() { this.close(); console.log('🗑️ Mobile menu destroyed')} } document.addEventListener('DOMContentLoaded', () => { const hamburger = document.querySelector('#mobileHamburger'); const menuPanel = document.querySelector('#mobileMenuPanel'); const menuOverlay = document.querySelector('#mobileMenuOverlay'); if (hamburger && menuPanel && menuOverlay) { window.mobileMenu = new MobileHamburgerMenu(); document.querySelectorAll('a[href^="#"]').forEach(anchor => { anchor.addEventListener('click', function (e) { e.preventDefault(); const target = document.querySelector(this.getAttribute('href')); if (target) { target.scrollIntoView({ behavior: 'smooth', block: 'start' })} })}); document.addEventListener('menuOpen', (e) => { console.log('🎉 Menu opened event fired')}); document.addEventListener('menuClose', (e) => { console.log('🎉 Menu closed event fired')}); console.log('💡 Mobile menu available at: window.mobileMenu'); console.log('💡 Try: window.mobileMenu.toggle()')} else { console.log('ℹ️ Mobile menu elements not found. Skipping initialization.')} }); if (typeof module !== 'undefined' && module.exports) { module.exports = MobileHamburgerMenu} if (typeof window !== 'undefined') { window.MobileHamburgerMenu = MobileHamburgerMenu}